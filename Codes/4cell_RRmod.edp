//4 cell solver: Robin-Robin ALGO MODIFIED

load "iovtk";
int[int] ffordervel = [1]; // to save images in .vtk format
int seed = 10;
int ld = 0; // 1: load prev. sol. as initial state
            // 0: use custom initial state
string path = "results/2021-11-28_10-19-46/";  // path of the previously computed U, V

/// Parameters:
string prm = "V2 matlab"; // "Set1", "V1 matlab", "V2 matlab"
include "PRM.edp";
include "channelPRM.edp";

/// Mesh
int N = 4;
int[int] reg(N);
mesh[int] Th(N);
int i; // index to distinguish cells: i -> Th(i+1)
int inside = 1;
int outside = 2;
border o1(t=2*Ly, 0){x=0; y=t; label=outside;}
border o2(t=0, 2*Lx){x=t; y=0; label=outside;}
border o3(t=0,2*Ly){x=2*Lx; y=t; label=outside;}
border o4(t=0, 2*Lx){x=2*Lx-t; y=2*Ly; label=outside;}
border i1(t=Lx,0){x=t; y=Ly; label=inside;}
border i2(t=2*Ly,Ly){x=Lx; y=t; label=inside;}
border i3(t=Lx, 2*Lx){x=t; y=Ly; label=inside;}
border i4(t=0, Ly){x=Lx; y=t; label=inside;}

mesh TH = buildmesh(o1(2*Ny) + o2(2*Nx) + o3(2*Ny) + o4(2*Nx)
                    + i1(Nx) + i2(Ny) + i3(Nx) + i4(Ny));

reg(0) = TH(Lx/2, Ly - 2).region;
reg(1) = TH(Lx/2, Ly + 2).region;
reg(2) = TH(Lx+2, Ly + 2).region;
reg(3) = TH(Lx+2, Ly - 2).region;

for(int i = 0; i < reg.n; i++) Th[i] = trunc(TH, region==reg(i));

// plot(TH, wait = true);
// plot(Th[0], wait = true);
// plot(Th[1], wait = true);
// plot(Th[2], wait = true);
// plot(Th[3], wait = true);

/// Finite element spaces:
// [Uj,Vj] solution of domain Thj
fespace Vh1(Th[0], P1);
Vh1 U1;
Vh1 V1;
fespace Vh2(Th[1], P1);
Vh2 U2;
Vh2 V2;
fespace Vh3(Th[2], P1);
Vh3 U3;
Vh3 V3;
fespace Vh4(Th[3], P1);
Vh4 U4;
Vh4 V4;

/// save channels imgs
Vh1 channel1 = betauRR;
Vh2 channel2 = betauRR;
Vh3 channel3 = betauRR;
Vh4 channel4 = betauRR;
plot(channel1, channel2,channel3, channel4, value =1, fill =1, cmm="opened channels", ps = "results/channel.ps");
savevtk("results/channel1.vtk", Th[0], channel1, dataname = "channel1", order = ffordervel);
savevtk("results/channel2.vtk", Th[1], channel2, dataname = "channel2", order = ffordervel);
savevtk("results/channel3.vtk", Th[2], channel3, dataname = "channel3", order = ffordervel);
savevtk("results/channel4.vtk", Th[3], channel4, dataname = "channel4", order = ffordervel);

/// Initialization: loaded or homogeneuous
// same initial guess in the direction of the auxin gradient
if (ld) {
  ifstream fU(path+"U/U" + tload + ".txt");
  ifstream fV(path+"V/V" + tload + ".txt");

  fU >> U1[];
  fV >> V1[];
  fU >> U2[];
  fV >> V2[];
  fU >> U3[];
  fV >> V3[];
  fU >> U4[];
  fV >> V4[];

  plot(U1, U2, U3, U4, value =1, fill =1, wait=1, cmm="Concentration of ACTIVE ROPs at time "+ t);
  plot(V1, V2, V3, V4, value =1, fill =1, wait=1, cmm="Concentration of INACTIVE ROPs at time "+ t);
}
else
{
  U1 = 1.5 * u0;
  V1 = 1.5 * v0;
  U2 = 1.5 * u0;
  V2 = 1.5 * v0;
  U3 = u0;
  V3 = v0;
  U4 = u0;
  V4 = v0;
}

// U/Viprec previous IT. sol; U/V0i previous time_step sol.
Vh1 U01 = U1, V01 = V1;
Vh1 U1prec, V1prec, incrU1, incrV1;
Vh2 U02 = U2, V02 = V2;
Vh2 U2prec, V2prec, incrU2, incrV2;
Vh3 U03 = U3, V03 = V3;
Vh3 U3prec, V3prec, incrU3, incrV3;
Vh4 U04 = U4, V04 = V4;
Vh4 U4prec, V4prec, incrU4, incrV4;

U1prec = U01;
V1prec = V01;
U2prec = U02;
V2prec = V02;
U3prec = U03;
V3prec = V03;
U4prec = U04;
V4prec = V04;
real resU1, resV1, resU2, resV2, resU3, resV3, resU4, resV4;

/// Varf
include "varf_ncellRR.edp";
matrix[int] A(N);
real[int] F1(2*Vh1.ndof), F2(2*Vh2.ndof), F3(2*Vh3.ndof), F4(2*Vh4.ndof);
real[int] tmp1(2*Vh1.ndof), tmp2(2*Vh2.ndof), tmp3(2*Vh3.ndof), tmp4(2*Vh4.ndof);
include "assemble_RR.edp";

// interpolation matrix
// 1<->2
matrix I12 = interpolate(Vh2, Vh1, inside = 1);
matrix I21 = interpolate(Vh1, Vh2, inside = 1);
// 2<->3
matrix I23 = interpolate(Vh3, Vh2, inside = 1);
matrix I32 = interpolate(Vh2, Vh3, inside = 1);
// 3<->4
matrix I34 = interpolate(Vh4, Vh3, inside = 1);
matrix I43 = interpolate(Vh3, Vh4, inside = 1);
// 4<->1
matrix I41 = interpolate(Vh1, Vh4, inside = 1);
matrix I14 = interpolate(Vh4, Vh1, inside = 1);

//function to //save residual estimate: (normalized) with L2 norm
func int residual(){
  incrU1[] = U1[];
  incrU1[] -= U1prec[];

  incrV1[] = V1[];
  incrV1[] -= V1prec[];

  incrU2[] = U2[];
  incrU2[] -= U2prec[];

  incrV2[] = V2[];
  incrV2[] -= V2prec[];

  incrU3[] = U3[];
  incrU3[] -= U3prec[];

  incrV4[] = V4[];
  incrV4[] -= V4prec[];

  real errU1 = int2d(Th[0]) ((incrU1)^2);
  real errV1 = int2d(Th[0]) ((incrV1)^2);
  real normU1 = int2d(Th[0]) ((U1prec)^2);
  real normV1 = int2d(Th[0]) ((V1prec)^2);

  resU1 = sqrt(errU1/(normU1+1e-12));
  resV1 = sqrt(errV1/(normV1+1e-12));

  cout << "residual U1 " << resU1 << endl;
  cout << "residual V1 " << resV1 << endl;

  real errU2 = int2d(Th[1]) ((incrU2)^2);
  real errV2 = int2d(Th[1]) ((incrV2)^2);
  real normU2 = int2d(Th[1]) ((U2prec)^2);
  real normV2 = int2d(Th[1]) ((V2prec)^2);

  resU2 = sqrt(errU2/(normU2+1e-12));
  resV2 = sqrt(errV2/(normV2+1e-12));

  cout << "residual U2 " << resU2 << endl;
  cout << "residual V2 " << resV2 << endl;

  real errU3 = int2d(Th[2]) ((incrU3)^2);
  real errV3 = int2d(Th[2]) ((incrV3)^2);
  real normU3 = int2d(Th[2]) ((U3prec)^2);
  real normV3 = int2d(Th[2]) ((V3prec)^2);

  resU3 = sqrt(errU3/(normU3+1e-12));
  resV3 = sqrt(errV3/(normV3+1e-12));

  cout << "residual U3 " << resU3 << endl;
  cout << "residual V3 " << resV3 << endl;

  real errU4 = int2d(Th[3]) ((incrU4)^2);
  real errV4 = int2d(Th[3]) ((incrV4)^2);
  real normU4 = int2d(Th[3]) ((U4prec)^2);
  real normV4 = int2d(Th[3]) ((V4prec)^2);

  resU4 = sqrt(errU4/(normU4+1e-12));
  resV4 = sqrt(errV4/(normV4+1e-12));

  cout << "residual U4 " << resU4 << endl;
  cout << "residual V4 " << resV4 << endl;

  return 0;
}

while(t < Tmax){
  t += dt;
  it ++;
  i = 0;
  assemble(i);
  i = 1;
  assemble(i);
  i = 2;
  assemble(i);
  i = 3;
  assemble(i);

  checktol = false;
  for (int iter = 0; iter < Niter; iter++){
  // Solve on Th1
  {
    i = 0;
    real[int] Fu = fu(0,Vh1);
    real[int] Fv = fv(0,Vh1);

    // 2->1
    real[int] Du2dn = du2dn1(0, Vh2);
    real[int] Tdu2dn(Vh1.ndof);
    Tdu2dn = I12' * Du2dn;

    real[int] Dv2dn = dv2dn1(0, Vh2);
    real[int] Tdv2dn(Vh1.ndof);
    Tdv2dn = I12' * Dv2dn;

    // 4->1
    real[int] Du4dn = du4dn1(0, Vh4);
    real[int] Tdu4dn(Vh1.ndof);
    Tdu4dn = I14' * Du4dn;

    real[int] Dv4dn = dv4dn1(0, Vh4);
    real[int] Tdv4dn(Vh1.ndof);
    Tdv4dn = I14' * Dv4dn;

    for(int ii = 0; ii < Vh1.ndof; ii++)
    {
      F1[ii] = Fu[ii] + Tdu2dn[ii] + Tdu4dn[ii];
      F1[ii + Vh1.ndof] = Fv[ii] + Tdv2dn[ii] + Tdv4dn[ii];
    }
    tmp1 = A[i]^-1 * F1;
    for(int ii = 0; ii < Vh1.ndof; ii++)
    {
      U1[][ii] = tmp1[ii];
      V1[][ii] = tmp1[ii + Vh1.ndof];
    }
  }
  // Solve on Th2
  {
    i = 1;
    real[int] Fu = fu(0,Vh2);
    real[int] Fv = fv(0,Vh2);

    //1->2
    real[int] Du1dn = du1dn2(0, Vh1);
    real[int] Tdu1dn(Vh2.ndof);
    Tdu1dn = I21' * Du1dn;

    real[int] Dv1dn = dv1dn2(0, Vh1);
    real[int] Tdv1dn(Vh2.ndof);
    Tdv1dn = I21' * Dv1dn;

    //3->2
    real[int] Du3dn = du3dn2(0, Vh3);
    real[int] Tdu3dn(Vh2.ndof);
    Tdu3dn = I23' * Du3dn;

    real[int] Dv3dn = dv3dn2(0, Vh3);
    real[int] Tdv3dn(Vh2.ndof);
    Tdv3dn = I23' * Dv3dn;

    for(int ii = 0; ii < Vh2.ndof; ii++)
    {
      F2[ii] = Fu[ii] + Tdu1dn[ii] + Tdu3dn[ii];
      F2[ii + Vh2.ndof] = Fv[ii] + Tdv1dn[ii] + Tdv3dn[ii];
    }

    tmp2 = A[i]^-1 * F2;

    for(int ii = 0; ii < Vh2.ndof; ii++)
    {
      U2[][ii] = tmp2[ii];
      V2[][ii] = tmp2[ii + Vh2.ndof];
    }
  }
  // Solve on Th3
  {
    i = 2;
    real[int] Fu = fu(0,Vh3);
    real[int] Fv = fv(0,Vh3);

    //2->3
    real[int] Du2dn = du2dn3(0, Vh2);
    real[int] Tdu2dn(Vh3.ndof);
    Tdu2dn = I32' * Du2dn;

    real[int] Dv2dn = dv2dn3(0, Vh2);
    real[int] Tdv2dn(Vh3.ndof);
    Tdv2dn = I32' * Dv2dn;

    //4->3
    real[int] Du4dn = du4dn3(0, Vh4);
    real[int] Tdu4dn(Vh3.ndof);
    Tdu4dn = I34' * Du4dn;

    real[int] Dv4dn = dv4dn3(0, Vh4);
    real[int] Tdv4dn(Vh3.ndof);
    Tdv4dn = I34' * Dv4dn;

    for(int ii = 0; ii < Vh3.ndof; ii++)
    {
      F3[ii] = Fu[ii] + Tdu2dn[ii] + Tdu4dn[ii];
      F3[ii + Vh3.ndof] = Fv[ii] + Tdv2dn[ii] + Tdv4dn[ii];
    }

    tmp3 = A[i]^-1 * F3;

    for(int ii = 0; ii < Vh3.ndof; ii++)
    {
      U3[][ii] = tmp3[ii];
      V3[][ii] = tmp3[ii + Vh3.ndof];
    }
  }
  // Solve on Th4
  {
    i = 3;
    real[int] Fu = fu(0,Vh4);
    real[int] Fv = fv(0,Vh4);

    //3->4
    real[int] Du3dn = du3dn4(0, Vh3);
    real[int] Tdu3dn(Vh4.ndof);
    Tdu3dn = I43' * Du3dn;

    real[int] Dv3dn = dv3dn4(0, Vh3);
    real[int] Tdv3dn(Vh4.ndof);
    Tdv3dn = I43' * Dv3dn;

    //1->4
    real[int] Du1dn = du1dn4(0, Vh1);
    real[int] Tdu1dn(Vh4.ndof);
    Tdu1dn = I41' * Du1dn;

    real[int] Dv1dn = dv1dn4(0, Vh1);
    real[int] Tdv1dn(Vh4.ndof);
    Tdv1dn = I41' * Dv1dn;

    for(int ii = 0; ii < Vh4.ndof; ii++)
    {
      F4[ii] = Fu[ii] + Tdu3dn[ii] + Tdu1dn[ii];
      F4[ii + Vh4.ndof] = Fv[ii] + Tdv3dn[ii] + Tdv1dn[ii];
    }

    tmp4 = A[i]^-1 * F4;

    for(int ii = 0; ii < Vh4.ndof; ii++)
    {
      U4[][ii] = tmp4[ii];
      V4[][ii] = tmp4[ii + Vh4.ndof];
    }
  }
  residual();
  checktol = (resU1 < 1e-2 && resV1 < 1e-2 && resU2 < 1e-2 && resV2 < 1e-2 &&
              resU3 < 1e-2 && resV3 < 1e-2 && resU4 < 1e-2 && resV4 < 1e-2);
  if(checktol){
    iter = Niter+1;
  }

  //update previous IT. sol.
  U1prec = U1;
  V1prec = V1;
  U2prec = U2;
  V2prec = V2;
  U3prec = U3;
  V3prec = V3;
  U4prec = U4;
  V4prec = V4;
  }
  // update old solution
  U01 = U1;
  V01 = V1;
  U02 = U2;
  V02 = V2;
  U03 = U3;
  V03 = V3;
  U04 = U4;
  V04 = V4;
  /// Results and save imgs
  if((it % OUTPUTit == 0.0))
  {
    plot(U1, U2, U3, U4, value =1, fill =1, wait=1, cmm="Concentration of ACTIVE ROPs at time "+ t, ps = "results/U" + t + ".ps");
    plot(V1, V2, V3, V4, value =1, fill =1, wait=1, cmm="Concentration of INACTIVE ROPs at time "+ t, ps = "results/V" + t + ".ps");
    savevtk("results/U1_" + t + ".vtk", Th[0], U1, dataname = "U1", order = ffordervel);
    savevtk("results/V1_" + t + ".vtk", Th[0], V1, dataname = "V1", order = ffordervel);
    savevtk("results/U2_" + t + ".vtk", Th[1], U2, dataname = "U2", order = ffordervel);
    savevtk("results/V2_" + t + ".vtk", Th[1], V2, dataname = "V2", order = ffordervel);
    savevtk("results/U3_" + t + ".vtk", Th[2], U3, dataname = "U3", order = ffordervel);
    savevtk("results/V3_" + t + ".vtk", Th[2], V3, dataname = "V3", order = ffordervel);
    savevtk("results/U4_" + t + ".vtk", Th[3], U4, dataname = "U4", order = ffordervel);
    savevtk("results/V4_" + t + ".vtk", Th[3], V4, dataname = "V4", order = ffordervel);

    // Output file for last results -> to be loaded in case of interuption
    ofstream foutU("results/U" + t + ".txt");
    ofstream foutV("results/V" + t + ".txt");
    foutU << U1[];
    foutU << U2[];
    foutU << U3[];
    foutU << U4[];
    foutV << V1[];
    foutV << V2[];
    foutV << V3[];
    foutV << V4[];
    cout << "#time " << t << endl;
  }

}
