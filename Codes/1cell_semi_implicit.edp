// 1 cell solver
// SEMI-IMPLICIT: Implicit in Time + diffusion, explicit in the reaction term

load "ffrandom";
load "iovtk";
int[int] ffordervel = [1]; // to save images in .vtk format
int seed = 10;
int ld = 1; // 1: load prev. sol. as initial state
            // 0: use custom initial state
string path = "results/2021-11-28_10-19-46/";  // path of the previously computed U, V

/// Parameters:
string prm = "V2 matlab"; // "Set1", "V1 matlab", "V2 matlab"
include "PRM.edp";
/// Mesh
mesh Th = square(Nx, Ny, [Lx * x, Ly * y]);

/// Finite element spaces
fespace Xh(Th, P1);
int dimXh =Xh.ndof;

Xh pert = eps * cos(2*pi*x/Lx)* cos(2*pi*y/Ly); //custom perturbation of initial state

Xh U, V, // U_n+1, V_n+1 (new sol at each time step)
   U0, V0; // U_n, V_n (previous time-step sol)

include "step_semi_implicit.edp";

// Initialization:
if (ld) {
  ifstream fU(path + "U" + tload + ".txt");
  ifstream fV(path + "V" + tload + ".txt");

  fU >> U[];
  fV >> V[];

  plot(U, fill = 1, value = 1, cmm = "Loaded Active ROPS"/*, wait = 1*/);
  plot(V, fill = 1, value = 1, cmm = "Loaded Inactive ROPS"/*, wait = 1*/);
  U[] += pert[];
  V[] += pert[];
}
else
{
  U = u0;
  V = v0;
  U[] += pert[];
  V[] += pert[];
  // srandom(seed);
  // // ranreal 1 generates a random number in [0,1]
  //   for(int ii = 0; ii < Xh.ndof; ii++)
  //   {
  //     U[][ii] += randreal1() / 3e5;
  //     V[][ii] += randreal1() / 3e5;
  //   }
}

plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs at time "+ t + "perturbed", ps = "results/U" + t + ".ps");
plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs at time "+ t + "perturbed", ps = "results/V" + t + ".ps");
savevtk("results/U" + t + ".vtk", Th, U, dataname = "Active_ROPs", order = ffordervel);
savevtk("results/V" + t + ".vtk", Th, V, dataname = "Inactive_ROPs", order = ffordervel);
ofstream foutU("results/U" + t + ".txt");
ofstream foutV("results/V" + t + ".txt");
foutU << U[];
foutV << V[];
U0 = U;
V0 = V;

/// Main
while(t < Tmax)
{
  t += dt;
  it ++;

  // perform an iteration of the linerized solver
  int errc = step(); // -> find U,V
  if (errc != 0)
  {
    cout << "ERROR" << endl;
    break;
  }

  // update old solution
  U0 = U;
  V0 = V;

  if((it % OUTPUTit == 0.0))
  {
    plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs at time "+ t, ps = "results/U" + t + ".ps");
    plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs at time "+ t, ps = "results/V" + t + ".ps");
  	savevtk("results/U" + t + ".vtk", Th, U, dataname = "Active_ROPs", order = ffordervel);
  	savevtk("results/V" + t + ".vtk", Th, V, dataname = "Inactive_ROPs", order = ffordervel);
    // Output file for last results -> to be loaded in case of interuption
    ofstream foutU("results/U" + t + ".txt");
    ofstream foutV("results/V" + t + ".txt");
    foutU << U[];
    foutV << V[];
    cout << "#time " << t << endl;
  }
  // else if ((t<100 & it%10==0)) //eventually to capture first time evolution
  // {
  //   plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs at time "+ t, ps = "results/U" + t + ".ps");
  //   plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs at time "+ t, ps = "results/V" + t + ".ps");
  //   savevtk("results/U" + t + ".vtk", Th, U, dataname = "Active_ROPs", order = ffordervel);
  //   savevtk("results/V" + t + ".vtk", Th, V, dataname = "Inactive_ROPs", order = ffordervel);
  //
  //   // Output file for last results -> to be loaded in case of interuption
  //   ofstream foutU("results/U" + t + ".txt");
  //   ofstream foutV("results/V" + t + ".txt");
  //   foutU << U[];
  //   foutV << V[];
  //   cout << "#time " << t << endl;
  // }
}

/// Postprocessing
plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs");
plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs");
