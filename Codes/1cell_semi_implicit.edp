// 1 cell solver, simulator: solve eq.(1) paper intra2, SEMI-IMPLICIT:IMPLICIT in TIME, EXPLICIT in the NL term
// still having problems reinstalling freefem, sorry havn't tried it yet

load "ffrandom";
load "iovtk";
int[int] ffordervel = [1]; // to save images in .vtk format
int seed = 10;
int ld = 0;
string path = "";  // path of the previously computed U, V

/// Parameters:
int Nx = 60, Ny = 60; //number of nodes
real t = 0.0;
real dt = 0.01; // dal paper
real Tmax = 6500; // dal paper 50000
int iter = 0;
int OUTPUTit = 100 ;
int it = 0;
//Table1, set1
real Lx = 50, Ly = 20; //dimension rectangular domain (micro m) */mu m
real D1 = 0.1, D2 = 10; //diffusion constants, D1 << D2
real k1 = 0.01; //activation of auxin
real b = 0.01; //rate of production of inactive ROP
real c = 0.1;
real r = 0.01; //rate usage active ROPs
real k2 = 0.1; //overall auxin level - needs to belong to the stable-stripe branch

real s = (Lx/Ly)^2; //aspect ratio
real epsi2 = D1/(Lx^2*(c+r));
real D = D2/(Lx^2*k1);
real tau = (c+r)/k1;
real beta = r/k1;
real gamma = (c+r)*k1^2/(k2*b^2);

//auxin
real nu = 1.5;
func alpha = exp(-nu*x); //function of x and y eventually

/// Mesh
mesh Th = square(Nx, Ny, [x, y]);

/// macros:  attention rescaled derivatives
macro gradS(f) [dx(f) , sqrt(s)*dy(f)] //

/// Finite element spaces
fespace Xh(Th, P2); //a caso ...
fespace Vh(Th,[P2,P2]); //not used

Xh U, V, // U_n+1, V_n+1 and new sol at each time step
   U0, V0; // U_n, V_n (previous time step sol)
int dimXh =Xh.ndof;

/// Linearized problem: matrices and vectors
varf au(u,phi) = int2d(Th) (u*phi / dt + epsi2 * gradS(u)'*gradS(phi) + u*phi)
               + int2d(Th) (U0*phi / dt); //F1
varf bu(v,phi) = int2d(Th) (-v*phi / (gamma*tau));
varf cu(v,phi) = int2d(Th) (-alpha* U0 * U0 * v * phi);

varf av(v,phi) = int2d(Th) (v*phi / dt + D/tau * gradS(v)'*gradS(phi) + v*phi / tau)
               + int2d(Th) (V0*phi / dt + phi / tau); //F2
varf bv(u,phi) = int2d(Th) (beta*gamma/tau * u*phi - gamma * u*phi);
varf cv(v,phi) = int2d(Th) (gamma*alpha* U0 * U0 * v * phi);

matrix Au = au(Xh,Xh);
matrix Av = av(Xh,Xh);
matrix Bu = bu(Xh,Xh);
matrix Bv = bv(Xh,Xh);
matrix tmpu, tmpv;
matrix Cu, Cv; // nedd to be updated at every time step
real[int] rhs1(dimXh),
          rhs2(dimXh),
          tmp1(2*dimXh); //need to be updated both at evry time step and Newton it
//try so solve pb with solution vd pag 79 DOC
Vh [wU, wV];

matrix A;
real[int] F(2*dimXh);

// set solver ... da qualche parte

//step of the Newton method: from Uold,Vold (u_k,V_k) -> find U,V (U_k+1, V_k+1))
func int step()
{
  // update time-dep matrices and vectors
  Cu = cu(Xh,Xh);
  Cv = cv(Xh,Xh);
  rhs1 = au(0,Xh);
  rhs2 = av(0,Xh);

  tmpu = Bu+Cu;
  tmpv = Bv+Cv;
  A = [[Au, tmpu],
       [tmpv, Av]];
  //set solver for matrices
  set(A, solver = UMFPACK);

  F = [rhs1,rhs2];

  //try1: not working
  // [U[], V[]] = A^-1 * F;

  //try2
  tmp1 = A^-1 * F;
  for(int ii = 0; ii < Xh.ndof; ii++)
  {
    U[][ii] = tmp1[ii];
    V[][ii] = tmp1[ii + Xh.ndof];
  }
  // U[] = tmp1[0:(dimXh-1)];
  // V[] = tmp1[dimXh:(2*dimXh-1)];

  // //try3: not sure, probably wrong
  // tmp1 = A^-1 * F;
  // wU[] = tmp1;
  // U = wU;
  // V = wV;

  return 0;
}

//Initialization: random perturbation or prev res
real u0 = 1./(gamma*beta);
real v0 = tau*beta*gamma/(tau + beta^2*gamma);

if (ld) {
  ifstream fU(path + "lastU.txt");
  ifstream fV(path + "lastV.txt");
  fU >> U[];
  fV >> V[];
  plot(U, fill = 1, value = 1, cmm = "Loaded Active ROPS", wait = 1);
  plot(V, fill = 1, value = 1, cmm = "Loaded Inactive ROPS", wait = 1);

} else
{
  U = u0;
  V = v0;
  srandom(seed);
  // ranreal 1 generates a random number in [0,1]
    for(int ii = 0; ii < Xh.ndof; ii++)
    {
      U[][ii] += randreal1() / 3e5;
      V[][ii] += randreal1() / 3e5;
    }
}

plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs at time "+ t + "perturbed", ps = "results/U" + t + ".ps");
plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs at time "+ t + "perturbed", ps = "results/V" + t + ".ps");
U0 = U;
V0 = V;

cout << "num" << randreal1() / 3e5 << endl;
cout << " u0 " << u0;
cout << " v0 " << v0;

// Output file for last results -> to be loaded in case of interuption
ofstream foutU("results/lastU.txt");
ofstream foutV("results/lastV.txt");
/// Main
while(t < Tmax)
{
  t += dt;
  it ++;

  // perform an iteration of the linerized solver
  int errc = step(); // -> find U,V
  if (errc != 0)
  {
    cout << "ERROR" << endl;
    break;
  }

    // update old solution
    U0 = U;
    V0 = V;

  cout << "#time " << t << endl;

  if((it % OUTPUTit == 0.0))
  {
    plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs at time "+ t, ps = "results/U" + t + ".ps");
    plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs at time "+ t, ps = "results/V" + t + ".ps");
  	savevtk("results/U" + t + ".vtk", Th, U, dataname = "Active ROPs", order = ffordervel);
  	savevtk("results/V" + t + ".vtk", Th, V, dataname = "Inactive ROPs", order = ffordervel);
    foutU << U[];
    foutV << V[];
  }
  // if(t<1)
  // {
  //   plot(U, value =1, fill =1, wait=1, cmm="Concentration of ACTIVE ROPs at time "+ t);
  //   plot(V, value =1, fill =1, wait=1, cmm="Concentration of INACTIVE ROPs at time "+ t);
  // }

}


/// Postprocessing
plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs");
plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs");
