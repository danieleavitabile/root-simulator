//varf for RR algo, for more than 2 cells
//for n = 4 cells trick
// U01 + (U02-U01)*i*(i-2)*(i-3)*1/2
//     - 0.5 * (U03-U01)*i*(i-1)*(i-3)*(-1/2)
//     + (U04-U01)*i*(i-1)*(i-2)*1/6

varf au(u,phi) = int2d(Th[i]) ((1/dt - tildea1) * u*phi + tildeD1 * gradS(u)'*gradS(phi))
               + int1d(Th[i], inside1) (betauRR * alphauRR * u*phi) //RRmod contribute
               + int1d(Th[i], inside2) (betauRR * alphauRR * u*phi) //RRmod contribute
               + int1d(Th[i], inside3) (betauRR * alphauRR * u*phi) //RRmod contribute
               + int1d(Th[i], inside4) (betauRR * alphauRR * u*phi) //RRmod contribute
                 ;
varf bu(v,phi) = int2d(Th[i]) (- tildeb1  * v*phi);
varf cu(v,phi) = int2d(Th[i]) (- tildec1 *
                              (U01 + 0.5 * (U02-U01)*i*(i-2)*(i-3)
                              - 0.5 * (U03-U01)*i*(i-1)*(i-3)
                              + (U04-U01)*i*(i-1)*(i-2)*1./6.)^2 * v * phi);

varf av(v,phi) = int2d(Th[i]) ((1/dt - tildea2) * v*phi + tildeD2 * gradS(v)'*gradS(phi))
               + int1d(Th[i], inside1) (betavRR * alphavRR * v*phi) //RRmod contribute
               + int1d(Th[i], inside2) (betavRR * alphavRR * v*phi) //RRmod contribute
               + int1d(Th[i], inside3) (betavRR * alphavRR * v*phi) //RRmod contribute
               + int1d(Th[i], inside4) (betavRR * alphavRR * v*phi) //RRmod contribute
                 ;
varf bv(u,phi) = int2d(Th[i]) (- tildeb2 * u*phi);
varf cv(v,phi) = int2d(Th[i]) (- tildec2 *
                              (U01 + (U02-U01)*i*(i-2)*(i-3)*1./2.
                              - 0.5 * (U03-U01)*i*(i-1)*(i-3)
                              + (U04-U01)*i*(i-1)*(i-2)*1./6.)^2 * v * phi);

varf fu(u,phi) = int2d(Th[i]) ((U01 + (U02-U01)*i*(i-2)*(i-3)*1./2.
                               - 0.5 * (U03-U01)*i*(i-1)*(i-3)
                               + (U04-U01)*i*(i-1)*(i-2)*1./6.)*phi / dt) //Fu
                ;
varf fv(v,phi) = int2d(Th[i]) ((V01 + (V02-V01)*i*(i-2)*(i-3)*1./2.
                               - 0.5 * (V03-V01)*i*(i-1)*(i-3)
                               + (V04-V01)*i*(i-1)*(i-2)*1./6.)*phi / dt + phi * f2) //Fv
                ;

// to choose if PARALLELIZABLE mode or not (comment the not used one)
// du1dn
varf du1dn2(u, phi) =
                      int1d(Th[0], inside1) (betauRR * alphauRR * U1 * phi)     // RRmod contribute
                   // int1d(Th[0], inside1) (betauRR * alphauRR * U1prec * phi) // for PARALLELIZABLE mode
                      ;
varf du1dn4(u, phi) =
                      int1d(Th[0], inside4) (betauRR * alphauRR * U1 * phi)     // RRmod contribute
                   // int1d(Th[0], inside4) (betauRR * alphauRR * U1prec * phi) //for PARALLELIZABLE mode
                      ;
//dv1dn
varf dv1dn2(v, phi) =
                      int1d(Th[0], inside1) (betavRR * alphavRR * V1 * phi)     // RRmod contribute
                    // int1d(Th[0], inside1) (betauRR * alphauRR * V1prec * phi)// for PARALLELIZABLE mode
                      ;
varf dv1dn4(v, phi) =
                      int1d(Th[0], inside4) (betavRR * alphavRR * V1 * phi)     // RRmod contribute
                   // int1d(Th[0], inside4) (betauRR * alphauRR * V1prec * phi) // for PARALLELIZABLE mode
                      ;
//du2dn
varf du2dn1(u, phi) =
                      int1d(Th[1], inside1) (betauRR * alphauRR * U2 * phi)     // RRmod contribute
                   // int1d(Th[1], inside1) (betauRR * alphauRR * U2prec * phi) // for PARALLELIZABLE mode
                      ;
varf du2dn3(u, phi) =
                      int1d(Th[1], inside2) (betauRR * alphauRR * U2 * phi)     // RRmod contribute
                   // int1d(Th[1], inside2) (betauRR * alphauRR * U2prec * phi) // for PARALLELIZABLE mode
                      ;
//dv2n
varf dv2dn1(v, phi) =
                      int1d(Th[1], inside1) (betavRR * alphavRR * V2 * phi)     // RRmod contribute
                   // int1d(Th[1], inside1) (betauRR * alphauRR * V2prec * phi) // for PARALLELIZABLE"mode
                      ;
varf dv2dn3(v, phi) =
                      int1d(Th[1], inside2) (betavRR * alphavRR * V2 * phi)     // RRmod contribute
                   // int1d(Th[1], inside2) (betauRR * alphauRR * V2prec * phi) // for PARALLELIZABLE mode
                      ;
//du3dn
varf du3dn2(u, phi) =
                      int1d(Th[2], inside2) (betauRR * alphauRR * U3 * phi)     // RRmod contribute
                   // int1d(Th[2], inside2) (betauRR * alphauRR * U3prec * phi) // for PARALLELIZABLE mode
                      ;
varf du3dn4(u, phi) =
                      int1d(Th[2], inside3) (betauRR * alphauRR * U3 * phi)     // RRmod contribute
                   // int1d(Th[2], inside3) (betauRR * alphauRR * U3prec * phi) //for PARALLELIZABLE mode
                      ;
//dv3dn
varf dv3dn2(v, phi) =
                      int1d(Th[2], inside2) (betavRR * alphavRR * V3 * phi)     // RRmod contribute
                   // int1d(Th[2], inside2) (betauRR * alphauRR * V3prec * phi) // for PARALLELIZABLE mode
                      ;
varf dv3dn4(v, phi) =
                      int1d(Th[2], inside3) (betavRR * alphavRR * V3 * phi)     // RRmod contribute
                   // int1d(Th[2], inside3) (betauRR * alphauRR * V3prec * phi) // for PARALLELIZABLE mode
                      ;
//du4dn
varf du4dn3(u, phi) =
                      int1d(Th[3], inside3) (betauRR * alphauRR * U4 * phi)     // RRmod contribute
                   // int1d(Th[3], inside3) (betauRR * alphauRR * U4prec * phi) // for PARALLELIZABLE mode
                      ;
varf du4dn1(u, phi) =
                      int1d(Th[3], inside4) (betauRR * alphauRR * U4 * phi)     // RRmod contribute
                   // int1d(Th[3], inside4) (betauRR * alphauRR * U4prec * phi) // for PARALLELIZABLE mode
                      ;
//dv4dn
varf dv4dn3(v, phi) =
                      int1d(Th[3], inside3) (betavRR * alphavRR * V4 * phi)     // RRmod contribute
                    // int1d(Th[3], inside3) (betauRR * alphauRR * V4prec * phi)// for PARALLELIZABLE mode
                      ;
varf dv4dn1(v, phi) =
                      int1d(Th[3], inside4) (betavRR * alphavRR * V4 * phi)     // RRmod contribute
                    // int1d(Th[3], inside4) (betauRR * alphauRR * V4prec * phi)// for PARALLELIZABLE mode
                      ;
