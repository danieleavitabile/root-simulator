// Check for the Jacobian used in 1cell_stationaryTest

/// Parameters:
string prm = "V2 matlab"; // "Set 1", "V1 matlab", "V2 matlab"
include "PRM.edp";
// include "params.edp";
Xh U0,V0,du,dv,
upos, vpos, uneg, vneg;

// U* = [u*, v*], V = [du, dv]
U0 = u0 ; // u*
V0 = v0; // v*

du = sin(2 * pi * x) * sin(2 * pi * y);
dv = sin(2 * pi * x) * sin(2 * pi * y);   // trial V
real normu = sqrt(int2d(Th) (du^2));
du = du / normu;
real normv = sqrt(int2d(Th) (dv^2));
dv = dv / normv;

// attention !!! to eps defined in params
upos = U0 + eps * du;
vpos = V0 + eps * dv;
uneg = U0 - eps * du;
vneg = V0 - eps * dv;

// Jacobian
varf au(dummyu,phi) = int2d(Th) (-tildeD1 * gradS(du)'*gradS(phi) + tildea1 * du*phi);
varf bu(dummyv,phi) = int2d(Th) (tildeb1 * dv*phi);
varf cu(dummyu,phi) = int2d(Th) (2 * tildec1 * U0 * V0 * du * phi) +
                       int2d(Th) (tildec1 * U0 * U0 * dv * phi);

varf av(dummyv,phi) = int2d(Th) (-tildeD2 * gradS(dv)'*gradS(phi) + tildea2 * dv*phi);
varf bv(dummyu,phi) = int2d(Th) (tildeb2 * du*phi);
varf cv(dummyu,phi) = int2d(Th) (2 * tildec2 * U0 * V0 * du * phi) +
                      int2d(Th)  (tildec2 * U0 * U0 * dv * phi);

real[int] Au = au(0,Xh);
real[int] Av = av(0,Xh);
real[int] Bu = bu(0,Xh);
real[int] Bv = bv(0,Xh);
real[int] Cu = cu(0,Xh);
real[int] Cv = cv(0,Xh);

real[int] JacU = Au + Bu;
JacU = JacU + Cu; // questa dovrebbe essere la parte critica, non lineare

real[int] JacV = Av + Bv;
JacV = JacV + Cv; // questa dovrebbe essere la parte critica, non lineare
real[int] Jac =[JacU, JacV];

//G(U*+ eps*du)
varf Gupos(dummyu,phi) = int2d(Th) (-tildeD1 * gradS(upos)'*gradS(phi) + tildea1 * upos*phi)
                       + int2d(Th) (tildeb1 * vpos*phi)
                       + int2d(Th) (tildec1 * upos*upos*vpos *phi)
                       ;

varf Gvpos(dummyv,phi) = int2d(Th) (-tildeD2 * gradS(vpos)'*gradS(phi) + tildea2 * vpos*phi)
                       + int2d(Th) (tildeb2 * upos*phi)
                       + int2d(Th) (tildec2 * upos*upos* vpos * phi)
                       ;

// varf Gupos(u,phi) = int2d(Th) (- epsi2 * gradS(upos)'*gradS(phi) + upos*phi)
//                   + int2d(Th) (-vpos*phi / (gamma*tau))
//                   + int2d(Th) (-alpha* upos * upos * vpos * phi);
//
// varf Gvpos(v,phi) = int2d(Th) (- D/tau * gradS(vpos)'*gradS(phi) + vpos*phi / tau)
//                   + int2d(Th) (beta*gamma/tau * upos*phi - gamma * upos*phi)
//                   + int2d(Th) (gamma*alpha* upos*upos * vpos * phi);

//G(U*- eps*du)
varf Guneg(dummyu,phi) = int2d(Th) (-tildeD1 * gradS(uneg)'*gradS(phi) + tildea1 * uneg*phi)
                       + int2d(Th) (tildeb1 * vneg*phi)
                       + int2d(Th) (tildec1 * uneg*uneg*vneg *phi)
                       ;

varf Gvneg(dummyv,phi) = int2d(Th) (-tildeD2 * gradS(vneg)'*gradS(phi) + tildea2 * vneg*phi)
                       + int2d(Th) (tildeb2 * uneg*phi)
                       + int2d(Th) (tildec2 * uneg*uneg*vneg *phi)
                       ;

real[int] G2u = Gupos(0,Xh);
real[int] G1u = Guneg(0,Xh);
G2u = G2u - G1u;
real[int] G2v = Gvpos(0,Xh);
real[int] G1v = Gvneg(0,Xh);
G2v = G2v - G1v;
real[int] Rhs = [G2u, G2v];
// Rhs = (2*eps)^(-1) * Rhs;

for (int i=Jac.n-5; i < Jac.n; i++) cout << "Rhs(i) = " << Rhs[i] << " " << "Jac(i) = " << Jac[i] << endl;
// real[int] res = Rhs - Jac;
real[int] res = Rhs - (2*eps)*Jac;
cout << "||RHS - JAC||_inf = " << res.linfty << endl << endl;

/// For checking G(U0) = 0
// for (int i=Jac.n-5; i < Jac.n; i++) cout << "F(i) = " << Rhs[i] << endl;
// cout << "||F||_inf = " << Rhs.linfty << endl << endl;
