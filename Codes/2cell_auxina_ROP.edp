//2 cell
//AUXINA-PINs dynamic + ROPs dynamics
// hyp: k20 ~ auxin, F6 rho 2.3  -> try not homogeneous alpha

load "ffrandom";
load "iovtk";
int[int] ffordervel = [1]; // to save images in .vtk format
int seed = 10;
int ld = 0;
string path = "results/2021-11-29_11-37-42/";

/// Parameters:
string prm = "Set C"; // "Set A", "Set B", "Set C"
string prmA = "F6"; // "F4", "F5", "F6", "F7"
include "PRM.edp";
include "channelPRM.edp";
include "PRMauxina.edp";
nu = 0.0; // set alpha homogeneous

/// ROPs system staff
/// Mesh:
int N = 2; // number of cells
int[int] reg(N);
mesh[int] Th(N);
int i,j; // index to distinguish cells
int inside = 1;
int outside = 2;
border o1(t=Ly, 0){x=0; y=t; label=outside;}
border o2(t=0, 2 * Lx){x=t; y=0; label=outside;}
border o3(t=0, Ly){x=2*Lx; y=t; label=outside;}
border o4(t=0, 2*Lx){x=2*Lx-t; y=Ly; label=outside;}
border i1(t=0, Ly){x=Lx; y=Ly-t; label=inside;}
mesh TH = buildmesh(o1(Ny) + o2(2*Nx) + o3(Ny) + o4(2*Nx) + i1(Ny));

reg(0) = TH(Lx - 2, Ly/2).region;
reg(1) = TH(Lx + 2, Ly/2).region;

for(int i = 0; i < N; i++) Th[i] = trunc(TH, region==reg(i));

// plot(TH, wait = true);
// plot(Th[0], wait = true);
// plot(Th[1], wait = true);

/// FEspace: [U1,V1] solutiion of domain Th1, [U2,V2] solutiion of domain Th2
fespace Vh1(Th[0], P1);
Vh1 U1;
Vh1 V1;
fespace Vh2(Th[1], P1);
Vh2 U2;
Vh2 V2;

U1 = 1.5 * u0;
V1 = 1.5 * v0;
U2 = u0;
V2 = v0;

Vh1 U01 = U1, V01 = V1;
Vh1 U1prec, V1prec, incrU1, incrV1;
Vh2 U02 = U2, V02 = V2;
Vh2 U2prec, V2prec, incrU2, incrV2;

U1prec = U01;
V1prec = V01;
U2prec = U02;
V2prec = V02;
real resU1, resV1, resU2, resV2;

/// Varf
include "varf_2cellRR.edp";
matrix[int] A(N); //ogni elemento Ã¨ una matrice a blocchi
real[int] F1(2*Vh1.ndof), F2(2*Vh2.ndof);
real[int] tmp1(2*Vh1.ndof), tmp2(2*Vh2.ndof);
include "assemble_RR.edp";

///Interpolation matrix:
matrix I12 = interpolate(Vh2, Vh1, inside = 1);
matrix I21 = interpolate(Vh1, Vh2, inside = 1);
fespace Vh(TH, P1);
Vh U1proj, U2proj, V1proj,V2proj;
matrix ITH1 = interpolate(Vh1, Vh, inside = 1);
matrix ITH2 = interpolate(Vh2, Vh, inside = 1);

func int residual(){
  incrU1[] = U1[];
  incrU1[] -= U1prec[];

  incrV1[] = V1[];
  incrV1[] -= V1prec[];

  incrU2[] = U2[];
  incrU2[] -= U2prec[];

  incrV2[] = V2[];
  incrV2[] -= V2prec[];

  //calcolo residuo normalizzato con norma L2
  real errU1 = int2d(Th[0]) ((incrU1)^2);
  real errV1 = int2d(Th[0]) ((incrV1)^2);
  real normU1 = int2d(Th[0]) ((U1prec)^2);
  real normV1 = int2d(Th[0]) ((V1prec)^2);

  resU1 = sqrt(errU1/(normU1+1e-12));
  resV1 = sqrt(errV1/(normV1+1e-12));

  cout << "residual U1 " << resU1 << endl;
  cout << "residual V1 " << resV1 << endl;

  real errU2 = int2d(Th[1]) ((incrU2)^2);
  real errV2 = int2d(Th[1]) ((incrV2)^2);
  real normU2 = int2d(Th[1]) ((U2prec)^2);
  real normV2 = int2d(Th[1]) ((V2prec)^2);

  resU2 = sqrt(errU2/(normU2+1e-12));
  resV2 = sqrt(errV2/(normV2+1e-12));

  cout << "residual U2 " << resU2 << endl;
  cout << "residual V2 " << resV2 << endl;

  return 0;
}

/// Auxin - PINs system staff
real[int] auxina(N);
real[int] PIN(2*(N-1));

/// Initialization
srandom(seed);
// ranreal 1 generates a random number in [0,1]
for(int i = 0; i < N; i++) auxina[i] = randreal1();
for(int i = 0; i < 2*(N-1); i++) PIN[i] = randreal1();
// for(int i = 0; i < N; i++) auxina[i] = i;
// for(int i = 0; i < 2*(N-1); i++) PIN[i] =i ;

/// Assemble
matrix Aa;
Aa = [[1/dtauxina + delta + PIN[0] + Da, -PIN[1]-Da],
     [-PIN[0]-Da ,1/dtauxina + delta + PIN[1] + Da]];
real Ap = 1/dtauxina + mu;
real[int] ba(N);
real[int] bp(2*(N-1));

func real flow(int i, int j)
{
  if(i<j)
    return (PIN[i+j-1]+Da)*auxina[i] - (PIN[i+j]+Da)*auxina[j];
  else
    return (PIN[i+j]+Da)*auxina[i] - (PIN[i+j-1]+Da)*auxina[j];
}

func int updateAa()
{
  Aa = [[1/dtauxina + delta + PIN[0] + Da, -PIN[1]-Da],
        [-PIN[0]-Da ,1/dtauxina + delta + PIN[1] + Da]];
  return 0;
}

exec("touch results/auxin.csv");

ofstream out("results/auxin.csv", append);
out << "time,auxin1,auxin2,PIN12,PIN21" << endl;

while(t<Tmax)
{
  t += dtauxina;
  it ++;

  /// Solve auxin pb
  // update matrix and rhs (time-dep)
  ba = k;
  ba += 1/dtauxina * auxina;
  bp = 1/dtauxina * PIN;
  i = 0; j = 1; // from cell 1 to cell 2
  bp[i] += h(flow(i,j));
  i = 1; j = 0; // from cell 2 to cell 1
  bp[i] += h(flow(i,j));

  updateAa();
  set(Aa, solver = UMFPACK);

  // solve
  auxina = Aa^(-1)*ba;
  for(int i = 0; i < 2*(N-1); i++) PIN[i] = 1/Ap * bp[i];

  // output csv
  if((it % OUTPUTitauxina == 0.0))
  {
    out << t <<","
        << auxina[0] << ","
        << auxina[1] << ","
        << PIN[0] << ","
        << PIN[1] << endl;
  }

  /// Solve ROPs pb
  // Update coupling term (k20) and assemble
  i = 0;
  k20 = auxina[i];
  assemble(i);
  i = 1;
  k20 = auxina[i];
  assemble(i);
  checktol = false;
  for (int iter = 0; iter < Niter; iter++){
  // solve on Th1
  {
    i = 0;
    real[int] Fu = fu(0,Vh1);
    real[int] Fv = fv(0,Vh1);

    //no need to compute weak normal derivative:
    // only 1 contribute with beta
    real[int] Du2dn = du2dn(0, Vh2);
    real[int] Tdu2dn(Vh1.ndof);
    Tdu2dn = I12' * Du2dn;

    real[int] Dv2dn = dv2dn(0, Vh2);
    real[int] Tdv2dn(Vh1.ndof);
    Tdv2dn = I12' * Dv2dn;

    for(int ii = 0; ii < Vh1.ndof; ii++)
    {
      F1[ii] = Fu[ii] + Tdu2dn[ii];
      F1[ii + Vh1.ndof] = Fv[ii] + Tdv2dn[ii];
    }
    tmp1 = A[i]^-1 * F1;
    for(int ii = 0; ii < Vh1.ndof; ii++)
    {
      U1[][ii] = tmp1[ii];
      V1[][ii] = tmp1[ii + Vh1.ndof];
    }
  }

  // solve on Th2
  {
    i = 1;
    real[int] Fu = fu(0,Vh2);
    real[int] Fv = fv(0,Vh2);

    //no need to compute weak normal derivative
    real[int] Du1dn = du1dn(0, Vh1);
    real[int] Tdu1dn(Vh2.ndof);
    Tdu1dn = I21' * Du1dn;

    real[int] Dv1dn = dv1dn(0, Vh1);
    real[int] Tdv1dn(Vh2.ndof);
    Tdv1dn = I21' * Dv1dn;

    for(int ii = 0; ii < Vh2.ndof; ii++)
    {
      F2[ii] = Fu[ii] + Tdu1dn[ii];
      F2[ii + Vh2.ndof] = Fv[ii] + Tdv1dn[ii];
    }

    tmp2 = A[i]^-1 * F2;

    for(int ii = 0; ii < Vh2.ndof; ii++)
    {
      U2[][ii] = tmp2[ii];
      V2[][ii] = tmp2[ii + Vh2.ndof];
    }
  }
  residual();
  checktol = (resU1 < 1e-2 && resV1 < 1e-2 && resU2 < 1e-2 && resV2 < 1e-2);
  if(checktol){
    iter = Niter+1;
  }

  //update previous ITERATION sol.
  U1prec = U1;
  V1prec = V1;
  U2prec = U2;
  V2prec = V2;
  }

  // update old solution
  U01 = U1;
  V01 = V1;
  U02 = U2;
  V02 = V2;
  /// results and save imgs
  if((it % OUTPUTit == 0.0))
  {
    plot(U1, U2, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs at time "+ t, ps = "results/U" + t + ".ps");
    plot(V1, V2, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs at time "+ t, ps = "results/V" + t + ".ps");

    savevtk("results/U1_" + t + ".vtk", Th[0], U1, dataname = "U1", order = ffordervel);
    savevtk("results/V1_" + t + ".vtk", Th[0], V1, dataname = "V1", order = ffordervel);
    savevtk("results/U2_" + t + ".vtk", Th[1], U2, dataname = "U2", order = ffordervel);
    savevtk("results/V2_" + t + ".vtk", Th[1], V2, dataname = "V2", order = ffordervel);

    // Output file for last results -> to be loaded in case of interuption
    ofstream foutU("results/U" + t + ".txt");
    ofstream foutV("results/V" + t + ".txt");
    foutU << U1[];
    foutU << U2[];
    foutV << V1[];
    foutV << V2[];
    cout << "#time " << t << endl;
  }

}
