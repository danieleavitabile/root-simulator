// varf for 2 cells RR algos: classic and modified
varf au(u,phi) = int2d(Th[i]) ((1/dt - tildea1) * u*phi + tildeD1 * gradS(u)'*gradS(phi))
               + int1d(Th[i], inside) (betauRR * alphauRR * u*phi)
                 ;
varf bu(v,phi) = int2d(Th[i]) (- tildeb1  * v*phi);
varf cu(v,phi) = int2d(Th[i]) (- tildec1 * (U02 + (U01-U02)*(1-i))^2 * v * phi);

varf av(v,phi) = int2d(Th[i]) ((1/dt - tildea2) * v*phi + tildeD2 * gradS(v)'*gradS(phi))
               + int1d(Th[i], inside) (betavRR * alphavRR * v*phi)
                 ;
varf bv(u,phi) = int2d(Th[i]) (- tildeb2 * u*phi);
varf cv(v,phi) = int2d(Th[i]) (- tildec2 * (U02 + (U01-U02)*(1-i))^2 * v * phi);

varf fu(u,phi) = int2d(Th[i]) ((U02 + (U01-U02)*(1-i))*phi / dt) //Fu
                ;
varf fv(v,phi) = int2d(Th[i]) ((V02 + (V01-V02)*(1-i))*phi / dt + phi * f2) //Fv
                ;

// to choose if PARALLELIZABLE mode or not, RR classic, RRmod (comment the not used one)
// du1dn = - (au(u1, phi) + bu(v1,phi)) + cu(v1, phi) - fu(phi) ) + ...
varf du1dn(u, phi) =
                      //   int2d(Th[0]) ((-1/dt + tildea1) * U1*phi - tildeD1 * gradS(U1)'*gradS(phi))
                      // + int2d(Th[0]) (tildeb1  * V1*phi)
                      // + int2d(Th[0]) (tildec1 * U01^2 * V1 * phi)
                      // + int2d(Th[0]) (U01 * phi / dt)
                      // + int1d(Th[0], inside) (alphauRR * U1 * phi)           // RR classic upto here
                      // int1d(Th[0], inside) (betauRR * alphauRR * Ubar * phi) // Ubar contribute
                      // int1d(Th[0], inside) (betauRR * alphauRR * U1 * phi)   // RRmod contribute
                      int1d(Th[0], inside) (betauRR * alphauRR * U1prec * phi)  // for PARALLELIZABLE mode
                      ;
//dv1dn = - (av(v1, phi) + bv(u1,phi)) + cv(v1, phi) - fv(phi) ) + ...
varf dv1dn(v, phi) =
                      //   int2d(Th[0]) ((-1/dt + tildea2) * V1*phi + tildeD2 * gradS(V1)'*gradS(phi))
                      // + int2d(Th[0]) ( tildeb2  * U1*phi)
                      // + int2d(Th[0]) ( tildec2 * U01^2 * V1 * phi)
                      // + int2d(Th[0]) (V01 * phi / dt + phi * f2)
                      // + int1d(Th[0], inside) (alphavRR * V1 * phi)           // RR classic upto here
                      // int1d(Th[0], inside) (betavRR * alphavRR * Vbar * phi) // Vbar contribute
                      // int1d(Th[0], inside) (betavRR * alphavRR * V1 * phi)   // RRmod contribute
                      int1d(Th[0], inside) (betauRR * alphauRR * V1prec * phi)  //for PARALLELIZABLE mode
                      ;
//du2dn = - (au(u2, phi) + bu(u2,phi)) + cu(u2, phi) - fv(phi) ) + ...
varf du2dn(u, phi) =
                      //   int2d(Th[1]) ((-1/dt + tildea1) * U2*phi + tildeD1 * gradS(U2)'*gradS(phi))
                      // + int2d(Th[1]) ( tildeb1  * V2*phi)
                      // + int2d(Th[1]) ( tildec1 * U02^2 * V2 * phi)
                      // + int2d(Th[1]) (U02 * phi / dt)
                      // + int1d(Th[1], inside) (alphauRR * U2 * phi)           // RR classic upto here
                      // int1d(Th[1], inside) (betauRR * alphauRR * Ubar * phi) // Ubar contribute
                      // int1d(Th[1], inside) (betauRR * alphauRR * U2 * phi)   // RRmod contribute
                      int1d(Th[1], inside) (betauRR * alphauRR * U2prec * phi)  // for PARALLELIZABLE mode
                        ;
//dv2dn = - (av(v2, phi) + bv(u2,phi)) + cv(v2, phi) - fv(phi) ) + ...
varf dv2dn(v, phi) =
                      //   int2d(Th[1]) ((-1/dt + tildea2) * V2*phi + tildeD2 * gradS(V2)'*gradS(phi))
                      // + int2d(Th[1]) ( tildeb2  * U2*phi)
                      // + int2d(Th[1]) ( tildec2 * U02^2 * V2 * phi)
                      // + int2d(Th[1]) (V02 * phi / dt + phi * f2)
                      // + int1d(Th[1], inside) (alphavRR * V2 * phi)           // RR classic upto here
                      // int1d(Th[1], inside) (betavRR * alphavRR * Vbar * phi) // Vbar contribute
                      // int1d(Th[1], inside) (betavRR * alphavRR * V2 * phi)   // RRmod contribute
                      int1d(Th[1], inside) (betavRR * alphavRR * V2prec * phi)  // for PARALLELIZABLE mode
                      ;
