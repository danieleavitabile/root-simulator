-- FreeFem++ v4.9 (Mon Oct  4 22:12:06 CEST 2021 - git v4.9)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue 
    1 : // Look for stationary solution of 1cell
    2 : // Newton's method
    3 : // classic assembling with func Jac e G
    4 : load "ffrandom";
    5 : load "iovtk" load: iovtk 
;
    6 : int[int] ffordervel = [1]; // to save images in .vtk format
    7 : int seed = 10;
    8 : int ld = 0;
    9 : string path = "results/2021-10-20_10-56-37/";  // path of the previously computed U, V
   10 : 
   11 : /// Parameters:
   12 : string prm = "V2 matlab"; // "Set1", "V1 matlab", "V2 matlab"
   13 : include "PRM.edp"/// Parameters:
    2 : // ROPs dynamics prms
    3 : int Nx, Ny; //number of nodes
    4 : real Lx, Ly, //dimension 2D domain [micro m]
    5 :      D1, D2, //diffusion constants, D1 << D2 [micro m /s^2]
    6 :      k1, //activation rate of auxin [1/s]
    7 :      k2, // k20 actually, overall auxin level [con^2/s]
    8 :      b, //rate of production of inactive ROP [con/s]
    9 :      c,r, //rate usage active ROPs [1/s]
   10 :      s, //aspect ratio
   11 :      epsi2,D,tau,beta,gamma,nu, //Rescaled prms
   12 :      u0, v0, //initial states
   13 :      tildeD1, tildeD2, tildea1, tildea2, tildeb1, tildeb2, f2; // synthetic coefficients
   14 : 
   15 : real eps = 0; // pertubation of initial state
   16 : 
   17 : if(prm == "Set 1")
   18 : {
   19 :   //Table1, set1 from ref.[10]
   20 :   Nx = 60;
   21 :   Ny = 60;
   22 : 
   23 :   Lx = 50; Ly = 20;
   24 :   D1 = 0.1; D2 = 10;
   25 :   k1 = 0.01;
   26 :   b = 0.01;
   27 :   c = 0.1;
   28 :   r = 0.01;
   29 :   k2 = 0.1;
   30 :   s = (Lx/Ly)^2;
   31 : 
   32 :   //Rescaled prms
   33 :   epsi2 = D1/(Lx^2*(c+r));
   34 :   D = D2/(Lx^2*k1);
   35 :   tau = (c+r)/k1;
   36 :   beta = r/k1;
   37 :   gamma = (c+r)*k1^2/(k2*b^2);
   38 : 
   39 :   //prm for auxin
   40 :   nu = 1.5;
   41 : 
   42 :   //stationary point or initialization
   43 :   u0 = 1./(gamma*beta);
   44 :   v0 = tau*beta*gamma/(tau + beta^2*gamma);
   45 :   // real uu0 =1./(gamma*beta);
   46 :   // real vv0 = tau*beta*gamma/(tau + beta^2*gamma);
   47 :   // func u0 = uu0* exp(-10*x);
   48 :   // func v0 = vv0 * exp(-10*x);
   49 : 
   50 :   //F coefficients:
   51 :   tildeD1 = epsi2;
   52 :   tildeD2 = D / tau;
   53 :   tildea1 = - 1;
   54 :   tildea2 = - 1/ tau;
   55 :   tildeb1 = 1/(gamma*tau);
   56 :   tildeb2 = gamma*(1 - beta/tau);
   57 : 
   58 :   f2 = 1/tau;
   59 : }
   60 : else if(prm == "V1 matlab")
   61 : {
   62 :   Nx = 100; Ny = 50;
   63 : 
   64 :   Lx = 2; Ly = 1;
   65 :   D1 = 0.1; D2 = 10;
   66 :   k1 = 0.01;
   67 :   b = 0.01;
   68 :   c = 0.1;
   69 :   r = 0.01;
   70 :   k2 = 0.1;
   71 :   s = 1;
   72 : 
   73 :   //Rescaled prms
   74 :   epsi2 = D1/(Lx^2*(c+r));
   75 :   D = D2/(Lx^2*k1);
   76 :   tau = (c+r)/k1;
   77 :   beta = r/k1;
   78 :   gamma = (c+r)*k1^2/(k2*b^2);
   79 : 
   80 :   //prm for auxin
   81 :   nu = 1.5;
   82 : 
   83 :   //stationary point or initialization
   84 :   u0 = b/r;
   85 :   v0 = (b*r*(c+r)) / (k1*r^2 + k2*b^2);
   86 : 
   87 :   //F coefficients
   88 :   tildeD1 = D1;
   89 :   tildeD2 = D2;
   90 :   tildea1 = -(c+r);
   91 :   tildea2 = -k1;
   92 :   tildeb1 = k1;
   93 :   tildeb2 = c;
   94 : 
   95 :   f2 = b;
   96 : }
   97 : else if(prm == "V2 matlab")
   98 : {
   99 :   Nx = 100; Ny = 30;
  100 : 
  101 :   //Table1, set3 from ref.[10]
  102 :   s = 5.5;
  103 :   Lx = 70.; Ly = Lx/sqrt(s);
  104 :   D1 = 0.075; D2 = 20;
  105 :   k1 = 0.008;
  106 :   b = 0.008;
  107 :   c = 0.1;
  108 :   r = 0.05;
  109 :   k2 = 0.5;
  110 : 
  111 :   //prm for auxin
  112 :   nu = 1.5;
  113 : 
  114 :   //Rescaled prms
  115 :   epsi2 = D1/(Lx^2*(c+r));
  116 :   D = D2/(Lx^2*k1);
  117 :   tau = (c+r)/k1;
  118 :   beta = r/k1;
  119 :   gamma = (c+r)*k1^2/(k2*b^2);
  120 : 
  121 :   //stationary point or initialization
  122 :   u0 = 0.9;
  123 :   v0 = 1;
  124 : 
  125 :   //F coefficients:
  126 :   tildeD1 = D1;
  127 :   tildeD2 = D2;
  128 :   tildea1 = -(c+r);
  129 :   tildea2 = -k1;
  130 :   tildeb1 = k1;
  131 :   tildeb2 = c;
  132 : 
  133 :   f2 = b;
  134 : }
  135 : 
  136 : cout << "u0: " << u0 << endl;
  137 : cout << "v0: " << v0 << endl;
  138 : 
  139 : /// Macros:  attention to rescaled derivatives
  140 : macro gradS(f) [dx(f) , sqrt(s)*dy(f)]  )  //
  141 : 
  142 : real t = 0.0;
  143 : real Tmax = 5;
  144 : 
  145 : 
  146 : func alpha1 = exp(-nu*x); //set1
  147 : func alpha2 = k2* exp(-nu*x/Lx)*sin(pi*y/Ly); //v1
  148 : func alpha3 = k2* exp(-nu*x/Lx); //v2
  149 : func alpha4 = exp(-nu*x/Lx);
  150 : func alpha5 = k2* exp(-nu*(x-70)/Lx) * (x>=70) + k2* exp(nu*(x-70)/Lx) * (x<70); // for opposite gradient
  151 : 
  152 : //alpha time dep.
  153 : // real period = 100;
  154 : // func alpha6 = alpha3 * sin(2*pi*t/period) + k2;
  155 : func x0 = 2*Lx/Tmax * t;
  156 : func alpha7 = k2* exp(-nu*(x-x0)/Lx) * (x>=x0) + k2* exp(nu*(x-x0)/Lx) * (x<x0);
  157 : 
  158 : /// Change properly here
  159 : func alpha = alpha3;
  160 : 
  161 : // "Set 1"
  162 : // func tildec1 = alpha;
  163 : // func tildec2 = - gamma*alpha;
  164 : // "V1 matlab", "V2 matlab"
  165 : func tildec1 = alpha;
  166 : func tildec2 = - alpha;
  167 : 
  168 : // TIME dep interations prms
  169 : real dt = 0.5; //delta t
  170 : int OUTPUTit = 2; //save solution img every OUTPUTit
  171 : int it = 0 * 1000; //counter for time-step solved
  172 : int tload = 499; //time t to be loaded: to be change if ld true
  173 : 
  174 : //NEWTON's method prms
  175 : int MAXiter =200; // maximum number of iterations
  176 : real tol = 1e-12, err; // tolerance
  177 : int iter = 0; //counter for Newton's iterations
  178 : ;
   14 : 
   15 : /// Mesh
   16 : mesh Th = square(Nx, Ny, [Lx * x, Ly * y]); // v1,v2 matlab
   17 : 
   18 : /// Finite element spaces
   19 : fespace Xh(Th, P1);
   20 : int dimXh =Xh.ndof;
   21 : 
   22 : include "Jac.edp"// (input): SET U = [U0, V0], dU = [du, dv] of norm 1 with
    2 : //              Xh U0, V0, du, dv;
    3 : // (output):
    4 : // Jac1, Jac2 -> J(U*)dU:   real[int] Jac
    5 : // Jac3       -> Jacobian Matrix: matrix J(U*)
    6 : 
    7 : 
    8 : //1: directly computes the vector
    9 : func real[int] Jac1(real[int] & U, real[int] & dU)
   10 : {
   11 :   Xh U0,V0,du,dv;
   12 :   for(int ii = 0; ii < Xh.ndof; ii++)
   13 :   {
   14 :     U0[][ii] = U[ii];
   15 :     V0[][ii] = U[ii + Xh.ndof];
   16 :     du[][ii] = dU[ii];
   17 :     dv[][ii] = dU[ii + Xh.ndof];
   18 :   }
   19 : 
   20 :   // Jacobian
   21 :   varf au(dummyu,phi) = int2d(Th) (-tildeD1 * gradS(du)     [dx(du) , sqrt(s)*dy(du)] '*gradS(phi)     [dx(phi) , sqrt(s)*dy(phi)]  + tildea1 * du*phi);
   22 :   varf bu(dummyv,phi) = int2d(Th) (tildeb1 * dv*phi);
   23 :   varf cu(dummyu,phi) = int2d(Th) (2 * tildec1 * U0 * V0 * du * phi) +
   24 :                          int2d(Th) (tildec1 * U0 * U0 * dv * phi);
   25 : 
   26 :   varf av(dummyv,phi) = int2d(Th) (-tildeD2 * gradS(dv)     [dx(dv) , sqrt(s)*dy(dv)] '*gradS(phi)     [dx(phi) , sqrt(s)*dy(phi)]  + tildea2 * dv*phi);
   27 :   varf bv(dummyu,phi) = int2d(Th) (tildeb2 * du*phi);
   28 :   varf cv(dummyu,phi) = int2d(Th) (2 * tildec2 * U0 * V0 * du * phi) +
   29 :                         int2d(Th)  (tildec2 * U0 * U0 * dv * phi);
   30 : 
   31 :   real[int] Au = au(0,Xh);
   32 :   real[int] Av = av(0,Xh);
   33 :   real[int] Bu = bu(0,Xh);
   34 :   real[int] Bv = bv(0,Xh);
   35 :   real[int] Cu = cu(0,Xh);
   36 :   real[int] Cv = cv(0,Xh);
   37 : 
   38 :   real[int] JacU = Au + Bu;
   39 :   JacU = JacU + Cu;
   40 : 
   41 :   real[int] JacV = Av + Bv;
   42 :   JacV = JacV + Cv;
   43 :   real[int] Jac = [JacU, JacV];
   44 : 
   45 :   return Jac;
   46 : }
   47 : 
   48 : //2: return J(U*)dU computed as product matrix * vector
   49 : func real[int] Jac2(real[int] & U, real[int] & dU)
   50 : {
   51 :   Xh U0,V0;
   52 :   for(int ii = 0; ii < Xh.ndof; ii++)
   53 :   {
   54 :     U0[][ii] = U[ii];
   55 :     V0[][ii] = U[ii + Xh.ndof];
   56 :   }
   57 : 
   58 :   // Jacobian
   59 :   varf au(du,phi) = int2d(Th) (-tildeD1 * gradS(du)     [dx(du) , sqrt(s)*dy(du)] '*gradS(phi)     [dx(phi) , sqrt(s)*dy(phi)]  + tildea1 * du*phi);
   60 :   varf bu(dv,phi) = int2d(Th) (tildeb1 * dv*phi);
   61 :   varf cuu(du,phi) = int2d(Th) (2 * tildec1 * U0 * V0 * du * phi);
   62 :   varf cuv(dv,phi) = int2d(Th) (tildec1 * U0 * U0 * dv * phi);
   63 : 
   64 :   varf av(dv,phi) = int2d(Th) (-tildeD2 * gradS(dv)     [dx(dv) , sqrt(s)*dy(dv)] '*gradS(phi)     [dx(phi) , sqrt(s)*dy(phi)]  + tildea2 * dv*phi);
   65 :   varf bv(du,phi) = int2d(Th) (tildeb2 * du*phi);
   66 :   varf cvu(du,phi) = int2d(Th) (2 * tildec2 * U0 * V0 * du * phi);
   67 :   varf cvv(dv,phi) = int2d(Th)  (tildec2 * U0 * U0 * dv * phi);
   68 : 
   69 :   matrix Au = au(Xh,Xh);
   70 :   matrix Av = av(Xh,Xh);
   71 :   matrix Bu = bu(Xh,Xh);
   72 :   matrix Bv = bv(Xh,Xh);
   73 :   matrix Cuu = cuu(Xh,Xh);
   74 :   matrix Cuv = cuv(Xh,Xh);
   75 :   matrix Cvu = cvu(Xh,Xh);
   76 :   matrix Cvv = cvv(Xh,Xh);
   77 : 
   78 :   matrix tmpu1, tmpu2, tmpv1, tmpv2;
   79 : 
   80 :   tmpu1 = Au + Cuu;
   81 :   tmpu2 = Bu + Cuv;
   82 :   tmpv1 = Bv + Cvu;
   83 :   tmpv2 = Av + Cvv;
   84 : 
   85 :   matrix Jac = [[tmpu1, tmpu2],
   86 :        [tmpv1, tmpv2]];
   87 : 
   88 :   real[int] JacdU = Jac * dU;
   89 : 
   90 :   return JacdU;
   91 : }
   92 : 
   93 : //3: computes only the Jacobian matrix: output matrix J(U*)
   94 : func matrix Jac3(real[int] & U)
   95 : {
   96 :   Xh U0,V0;
   97 :   for(int ii = 0; ii < Xh.ndof; ii++)
   98 :   {
   99 :     U0[][ii] = U[ii];
  100 :     V0[][ii] = U[ii + Xh.ndof];
  101 :   }
  102 : 
  103 :   // Jacobian
  104 :   varf au(du,phi) = int2d(Th) (-tildeD1 * gradS(du)     [dx(du) , sqrt(s)*dy(du)] '*gradS(phi)     [dx(phi) , sqrt(s)*dy(phi)]  + tildea1 * du*phi);
  105 :   varf bu(dv,phi) = int2d(Th) (tildeb1 * dv*phi);
  106 :   varf cuu(du,phi) = int2d(Th) (2 * tildec1 * U0 * V0 * du * phi);
  107 :   varf cuv(dv,phi) = int2d(Th) (tildec1 * U0 * U0 * dv * phi);
  108 : 
  109 :   varf av(dv,phi) = int2d(Th) (-tildeD2 * gradS(dv)     [dx(dv) , sqrt(s)*dy(dv)] '*gradS(phi)     [dx(phi) , sqrt(s)*dy(phi)]  + tildea2 * dv*phi);
  110 :   varf bv(du,phi) = int2d(Th) (tildeb2 * du*phi);
  111 :   varf cvu(du,phi) = int2d(Th) (2 * tildec2 * U0 * V0 * du * phi);
  112 :   varf cvv(dv,phi) = int2d(Th)  (tildec2 * U0 * U0 * dv * phi);
  113 : 
  114 :   matrix Au = au(Xh,Xh);
  115 :   matrix Av = av(Xh,Xh);
  116 :   matrix Bu = bu(Xh,Xh);
  117 :   matrix Bv = bv(Xh,Xh);
  118 :   matrix Cuu = cuu(Xh,Xh);
  119 :   matrix Cuv = cuv(Xh,Xh);
  120 :   matrix Cvu = cvu(Xh,Xh);
  121 :   matrix Cvv = cvv(Xh,Xh);
  122 : 
  123 :   matrix tmpu1, tmpu2, tmpv1, tmpv2;
  124 : 
  125 :   tmpu1 = Au + Cuu;
  126 :   tmpu2 = Bu + Cuv;
  127 :   tmpv1 = Bv + Cvu;
  128 :   tmpv2 = Av + Cvv;
  129 : 
  130 :   matrix Jac = [[tmpu1, tmpu2],
  131 :        [tmpv1, tmpv2]];
  132 : 
  133 :   return Jac;
  134 : }
  135 : ;
   23 : include "G.edp"// Compute G(U)
    2 : // (input)  real[int] U: vector corresponding to [u,v], Xh u,v;
    3 : // (output) real[int] Gu :G(U) vector corresponding to [Gu, Gv];
    4 : func real[int] G(real[int] &U){
    5 :   Xh u,v;
    6 :   for(int ii = 0; ii < Xh.ndof; ii++)
    7 :   {
    8 :     u[][ii] = U[ii];
    9 :     v[][ii] = U[ii + Xh.ndof];
   10 :   }
   11 :   varf gu(dummyu,phi) = int2d(Th) (-tildeD1 * gradS(u)     [dx(u) , sqrt(s)*dy(u)] '*gradS(phi)     [dx(phi) , sqrt(s)*dy(phi)]  + tildea1 * u*phi)
   12 :                          + int2d(Th) (tildeb1 * v*phi)
   13 :                          + int2d(Th) (tildec1 * u*u*v *phi)
   14 :                          ;
   15 : 
   16 :   varf gv(dummyv,phi) = int2d(Th) (-tildeD2 * gradS(v)     [dx(v) , sqrt(s)*dy(v)] '*gradS(phi)     [dx(phi) , sqrt(s)*dy(phi)]  + tildea2 * v*phi)
   17 :                          + int2d(Th) (tildeb2 * u*phi)
   18 :                          + int2d(Th) (tildec2 * u*u* v * phi)
   19 :                          + int2d(Th) (f2 * phi)
   20 :                          ;
   21 : 
   22 :   real[int] Gu = gu(0,Xh);
   23 :   real[int] Gv = gv(0,Xh);
   24 :   real[int] G = [Gu, Gv];
   25 : 
   26 :   return G;
   27 : }
   28 : ;
   24 : 
   25 : // perturbation
   26 : Xh pert = eps * cos(2*pi*x/Lx)* cos(2*pi*y/Ly);
   27 : 
   28 : Xh U, V, // U_k+1, V_k+1
   29 :    U0, V0, // U_k, V_k
   30 :    incrU, incrV;
   31 : real[int] tmp1(2*dimXh);
   32 : 
   33 : //step of the Newton method: from U0,V0 (U_k,V_k) -> find U,V (U_k+1, V_k+1))
   34 : func int step()
   35 : {
   36 :   real[int] UU = [U0[], V0[]];
   37 :   matrix Jac = Jac3(UU);
   38 :   //set solver for matrices
   39 :   set(Jac, solver = UMFPACK);
   40 :   real[int] Rhs = - G(UU);
   41 : 
   42 :   tmp1 = Jac^-1 * Rhs; //tmp1 = [du, dv]
   43 :   for(int ii = 0; ii < Xh.ndof; ii++)
   44 :   {
   45 :     U[][ii] += tmp1[ii];
   46 :     V[][ii] += tmp1[ii + Xh.ndof];
   47 :   }
   48 : 
   49 :   return 0;
   50 : }
   51 : 
   52 : //return residual estimate: (normalized) with L2 norm
   53 : func real residual()
   54 : {
   55 :   // compute the increment between (U,V) and (U0,V0)
   56 :   incrU[] = U[];
   57 :   incrU[] -= U0[];
   58 : 
   59 :   incrV[] = V[];
   60 :   incrV[] -= V0[];
   61 : 
   62 :   real errU = int2d(Th) ((incrU)^2);
   63 :   real errV = int2d(Th) ((incrV)^2);
   64 :   real normU = int2d(Th) ((U0)^2);
   65 :   real normV = int2d(Th) ((V0)^2);
   66 : 
   67 :   return sqrt(errU/(normU+1e-12)) + sqrt(errV/(normV+1e-12));
   68 : }
   69 : 
   70 : //Initialization:
   71 : if (ld) {
   72 :   ifstream fU(path + "U/U" + t + ".txt");
   73 :   ifstream fV(path + "V/V" + t + ".txt");
   74 : 
   75 :   fU >> U[];
   76 :   fV >> V[];
   77 : 
   78 :   plot(U, fill = 1, value = 1, cmm = "Loaded Active ROPS", wait = 1);
   79 :   plot(V, fill = 1, value = 1, cmm = "Loaded Inactive ROPS", wait = 1);
   80 : }
   81 : else
   82 : {
   83 :   U = u0;
   84 :   V = v0;
   85 :   U[] += pert[];
   86 :   V[] += pert[];
   87 :   // srandom(seed);
   88 :   // // ranreal 1 generates a random number in [0,1]
   89 :   //   for(int ii = 0; ii < Xh.ndof; ii++)
   90 :   //   {
   91 :   //     U[][ii] += randreal1();
   92 :   //     V[][ii] += randreal1();
   93 :   //   }
   94 : }
   95 : 
   96 : plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs perturbed", ps = "results/U" + iter + ".ps");
   97 : plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs perturbed", ps = "results/V" + iter + ".ps");
   98 : plot(U, dim = 3, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs perturbed");
   99 : plot(V, dim = 3, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs perturbed");
  100 : savevtk("results/U" + iter + ".vtk", Th, U, dataname = "Active_ROPs", order = ffordervel);
  101 : savevtk("results/V" + iter + ".vtk", Th, V, dataname = "Inactive_ROPs", order = ffordervel);
  102 : ofstream foutU("results/U" + iter + ".txt");
  103 : ofstream foutV("results/V" + iter + ".txt");
  104 : foutU << U[];
  105 : foutV << V[];
  106 : U0 = U;
  107 : V0 = V;
  108 : 
  109 : /// Main: Newton loop
  110 : err = tol + 1; // at least one iteration has to be performed
  111 : for(iter = 1; iter < MAXiter && err > tol; ++iter)
  112 : {
  113 :   //perform an iteration of the linerized solver
  114 :   int errc = step(); // -> find U,V
  115 :   if (errc != 0)
  116 :   {
  117 :     cout << "ERROR" << endl;
  118 :     break;
  119 :   }
  120 : 
  121 :   //update err for the stopping criterion
  122 :   err = residual(); //-> compute the residual between U,V and U0, V0
  123 :   cout << "#err at "<< iter << "iter: " << err << endl;
  124 : 
  125 :   /// update old solution
  126 :   U0 = U;
  127 :   V0 = V;
  128 : 
  129 :   plot(U, value =1, fill =1, cmm="Concentration of ACTIVE ROPs at ITERATION "+ iter, ps = "results/U" + iter + ".ps");
  130 :   plot(V, value =1, fill =1, cmm="Concentration of INACTIVE ROPs at ITERATION"+ iter, ps = "results/V" + iter + ".ps");
  131 :   plot(U, dim = 3, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs perturbed");
  132 :   plot(V, dim = 3, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs perturbed");
  133 :   savevtk("results/U" + iter + ".vtk", Th, U, dataname = "Active_ROPs", order = ffordervel);
  134 :   savevtk("results/V" + iter + ".vtk", Th, V, dataname = "Inactive_ROPs", order = ffordervel);
  135 : 
  136 :   // Output file for last results -> to be loaded in case of interruption
  137 :   ofstream foutU("results/U" + iter + ".txt");
  138 :   ofstream foutV("results/V" + iter + ".txt");
  139 :   foutU << U[];
  140 :   foutV << V[];
  141 : 
  142 : }
  143 : 
  144 : /// Postprocessing
  145 : cout << "# nonlinear iter: " << iter << endl;
  146 : cout << "# residual: " << err << endl;
  147 : 
  148 : plot(U, value =1, fill =1, wait=1, cmm="Concentration of ACTIVE ROPs");
  149 : plot(V, value =1, fill =1, wait=1, cmm="Concentration of INACTIVE ROPs");
  150 : plot(U, dim = 3, value =1, fill =1, wait=1, cmm="Concentration of ACTIVE ROPs");
  151 : plot(V, dim = 3, value =1, fill =1, wait=1, cmm="Concentration of INACTIVE ROPs");
  152 :  sizestack + 1024 =24096  ( 23072 )

u0: 0.9
v0: 1
  -- Square mesh : nb vertices  =3131 ,  nb triangles = 6000 ,  nb boundary edges 260
 0x55b8287db1a0 VTK_FILE 1
 0x55b8287db5b0 VTK_FILE 1
#err at 1iter: 1.58174
 0x55b8287a2eb0 VTK_FILE 1
 0x55b8287a29b0 VTK_FILE 1
#err at 2iter: 1.05797
 0x55b8287a2f80 VTK_FILE 1
 0x55b8287aae60 VTK_FILE 1
#err at 3iter: 1.42526
 0x55b8287a2f80 VTK_FILE 1
 0x55b8287db420 VTK_FILE 1
#err at 4iter: 2.339
 0x55b8287d2860 VTK_FILE 1
 0x55b8287e8940 VTK_FILE 1
#err at 5iter: 2.36258
 0x55b8287a2aa0 VTK_FILE 1
 0x55b8287a9920 VTK_FILE 1
#err at 6iter: 3.01007
 0x55b8286e8aa0 VTK_FILE 1
 0x55b8287db5b0 VTK_FILE 1
#err at 7iter: 1.44698
 0x55b8287a2f80 VTK_FILE 1
 0x55b8287db5b0 VTK_FILE 1
#err at 8iter: 2.31979
 0x55b8286e8aa0 VTK_FILE 1
 0x55b8287ab550 VTK_FILE 1
#err at 9iter: 4.77698
 0x55b8287e3610 VTK_FILE 1
 0x55b8287db5b0 VTK_FILE 1
#err at 10iter: 0.646631
 0x55b8287a2830 VTK_FILE 1
 0x55b8287d2860 VTK_FILE 1
#err at 11iter: 3.37345
 0x55b8287a3460 VTK_FILE 1
 0x55b8287db5b0 VTK_FILE 1
#err at 12iter: 1.06838
 0x55b8287a09f0 VTK_FILE 1
 0x55b8287db5b0 VTK_FILE 1
#err at 13iter: 0.565418
 0x55b8287a9920 VTK_FILE 1
 0x55b8287db030 VTK_FILE 1
#err at 14iter: 1.40694
 0x55b8287a9c90 VTK_FILE 1
 0x55b8287aa6c0 VTK_FILE 1
#err at 15iter: 2.46973
 0x55b8287a3530 VTK_FILE 1
 0x55b8287ab0e0 VTK_FILE 1
#err at 16iter: 1.42738
 0x55b8287a3890 VTK_FILE 1
 0x55b8287e3610 VTK_FILE 1
#err at 17iter: 15.2071
 0x55b8287a32a0 VTK_FILE 1
 0x55b8287e8730 VTK_FILE 1
#err at 18iter: 0.793058
 0x55b8287db5b0 VTK_FILE 1
 0x55b8287ab030 VTK_FILE 1
#err at 19iter: 0.756966
 0x55b8287db420 VTK_FILE 1
 0x55b8287a9790 VTK_FILE 1
#err at 20iter: 0.652445
 0x55b8287db120 VTK_FILE 1
 0x55b8287d2860 VTK_FILE 1
#err at 21iter: 1.08229
 0x55b8287e4d60 VTK_FILE 1
 0x55b8287daf70 VTK_FILE 1
#err at 22iter: 11.4606
 0x55b8287a2eb0 VTK_FILE 1
 0x55b8287db5b0 VTK_FILE 1
#err at 23iter: 0.666861
 0x55b8287db420 VTK_FILE 1
 0x55b8287aa090 VTK_FILE 1
#err at 24iter: 0.670416
 0x55b8287a2eb0 VTK_FILE 1
 0x55b8287a3600 VTK_FILE 1
#err at 25iter: 0.730817
 0x55b8287a2eb0 VTK_FILE 1
 0x55b8287a3390 VTK_FILE 1
#err at 26iter: 0.709767
 0x55b8287ab030 VTK_FILE 1
 0x55b8287d2860 VTK_FILE 1
#err at 27iter: 11.5371
 0x55b8287db5b0 VTK_FILE 1
 0x55b8287a29d0 VTK_FILE 1
#err at 28iter: 0.746193
 0x55b8287a3460 VTK_FILE 1
 0x55b8287a2eb0 VTK_FILE 1
#err at 29iter: 0.702558
 0x55b8287a3530 VTK_FILE 1
 0x55b8287d2860 VTK_FILE 1
#err at 30iter: 0.591828
 0x55b8287a3460 VTK_FILE 1
 0x55b8287a3a60 VTK_FILE 1
#err at 31iter: 2.45238
 0x55b8287a3460 VTK_FILE 1
 0x55b8287a9c90 VTK_FILE 1
#err at 32iter: 0.787202
 0x55b8287ab390 VTK_FILE 1
 0x55b8287a3530 VTK_FILE 1
#err at 33iter: 1.34792
 0x55b8287a3460 VTK_FILE 1
 0x55b8287ab550 VTK_FILE 1
#err at 34iter: 3.5794
 0x55b8287a09f0 VTK_FILE 1
 0x55b8287daf70 VTK_FILE 1
#err at 35iter: 0.925355
 0x55b8287a2760 VTK_FILE 1
 0x55b8287d2860 VTK_FILE 1
#err at 36iter: 27.34
 0x55b82879e8b0 VTK_FILE 1
 0x55b8287a2830 VTK_FILE 1
#err at 37iter: 0.684971
 0x55b8287ab190 VTK_FILE 1
 0x55b8287db420 VTK_FILE 1
#err at 38iter: 0.668396
 0x55b82879fc70 VTK_FILE 1
 0x55b8287daf70 VTK_FILE 1
#err at 39iter: 0.668755
 0x55b8287a0520 VTK_FILE 1
 0x55b8287db420 VTK_FILE 1
#err at 40iter: 0.669562
 0x55b82879e8b0 VTK_FILE 1
 0x55b8287d2860 VTK_FILE 1
#err at 41iter: 0.681681
 0x55b8287a3390 VTK_FILE 1
 0x55b8287aa6c0 VTK_FILE 1
#err at 42iter: 1.66534
 0x55b8287a29d0 VTK_FILE 1
 0x55b8287daf70 VTK_FILE 1
#err at 43iter: 0.728501
 0x55b82879e8b0 VTK_FILE 1
 0x55b8287a2370 VTK_FILE 1
#err at 44iter: 0.671192
 0x55b8287db5b0 VTK_FILE 1
 0x55b8286e8aa0 VTK_FILE 1
#err at 45iter: 0.671204
 0x55b8287db5b0 VTK_FILE 1
 0x55b8287a36d0 VTK_FILE 1
#err at 46iter: 0.734235
 0x55b8287a0520 VTK_FILE 1
 0x55b8287a2810 VTK_FILE 1
#err at 47iter: 1.45995
 0x55b8287d68b0 VTK_FILE 1
 0x55b8287e4d60 VTK_FILE 1
#err at 48iter: 0.669683
 0x55b8287e4d60 VTK_FILE 1
 0x55b8287ab0e0 VTK_FILE 1
#err at 49iter: 0.671372
 0x55b8287daf70 VTK_FILE 1
 0x55b8287d2860 VTK_FILE 1
#err at 50iter: 0.676423
 0x55b8287a2810 VTK_FILE 1
 0x55b8287db120 VTK_FILE 1
#err at 51iter: 0.68955
 0x55b8287db420 VTK_FILE 1
 0x55b8287aae60 VTK_FILE 1
#err at 52iter: 0.805054
 0x55b8287db420 VTK_FILE 1
 0x55b8287a37a0 VTK_FILE 1
#err at 53iter: 0.914367
 0x55b8287a29d0 VTK_FILE 1
 0x55b8287db5b0 VTK_FILE 1
#err at 54iter: 0.80391
 0x55b8287d2860 VTK_FILE 1
 0x55b82879fc70 VTK_FILE 1
#err at 55iter: 0.877677
 0x55b8287d2860 VTK_FILE 1
 0x55b8287a9920 VTK_FILE 1
#err at 56iter: 0.690031
 0x55b8287a36d0 VTK_FILE 1
 0x55b8287daf70 VTK_FILE 1
#err at 57iter: 0.632621
 0x55b8287a37a0 VTK_FILE 1
 0x55b8287d68b0 VTK_FILE 1
#err at 58iter: 0.491158
 0x55b8287a37a0 VTK_FILE 1
 0x55b8287db4e0 VTK_FILE 1
#err at 59iter: 0.604052
 0x55b8287db670 VTK_FILE 1
 0x55b8287daf70 VTK_FILE 1
#err at 60iter: 0.845438
 0x55b8287d68b0 VTK_FILE 1
 0x55b8287a3a60 VTK_FILE 1
#err at 61iter: 0.305841
 0x55b8287a9920 VTK_FILE 1
 0x55b8287db420 VTK_FILE 1
#err at 62iter: 0.17835
 0x55b8287a2760 VTK_FILE 1
 0x55b8287daf70 VTK_FILE 1
#err at 63iter: 0.85732
 0x55b8287db5b0 VTK_FILE 1
 0x55b8287d68b0 VTK_FILE 1
#err at 64iter: 0.283242
 0x55b8287a2760 VTK_FILE 1
 0x55b82879fb60 VTK_FILE 1
#err at 65iter: 0.179
 0x55b8287a2760 VTK_FILE 1
 0x55b82879fa80 VTK_FILE 1
#err at 66iter: 0.579481
 0x55b8287a2760 VTK_FILE 1
 0x55b82879fd90 VTK_FILE 1
#err at 67iter: 0.213169
 0x55b8287daf70 VTK_FILE 1
 0x55b8287ab190 VTK_FILE 1
#err at 68iter: 0.306857
 0x55b82879fa80 VTK_FILE 1
 0x55b8287a2de0 VTK_FILE 1
#err at 69iter: 0.254261
 0x55b8287daf70 VTK_FILE 1
 0x55b8287db420 VTK_FILE 1
#err at 70iter: 0.286806
 0x55b8287d2860 VTK_FILE 1
 0x55b8286e8aa0 VTK_FILE 1
#err at 71iter: 0.204823
 0x55b8286e8aa0 VTK_FILE 1
 0x55b8287a3460 VTK_FILE 1
#err at 72iter: 0.313199
 0x55b82879fa80 VTK_FILE 1
 0x55b8287ab190 VTK_FILE 1
#err at 73iter: 0.177826
 0x55b8287db420 VTK_FILE 1
 0x55b8287a2900 VTK_FILE 1
#err at 74iter: 0.300279
 0x55b8287a2de0 VTK_FILE 1
 0x55b8287a3a40 VTK_FILE 1
#err at 75iter: 0.131329
 0x55b8287ab190 VTK_FILE 1
 0x55b8287ab030 VTK_FILE 1
#err at 76iter: 0.193962
 0x55b8287db5b0 VTK_FILE 1
 0x55b8287a32c0 VTK_FILE 1
#err at 77iter: 0.0760018
 0x55b8287a3460 VTK_FILE 1
 0x55b8287db420 VTK_FILE 1
#err at 78iter: 0.124871
 0x55b82879fb60 VTK_FILE 1
 0x55b8287e8940 VTK_FILE 1
#err at 79iter: 0.0286382
 0x55b8287daf70 VTK_FILE 1
 0x55b8287db5b0 VTK_FILE 1
#err at 80iter: 0.0311975
 0x55b8287a3890 VTK_FILE 1
 0x55b8287a2b70 VTK_FILE 1
#err at 81iter: 0.00243946
 0x55b8287ab0e0 VTK_FILE 1
 0x55b82879fb60 VTK_FILE 1
#err at 82iter: 0.000204442
 0x55b8287daf70 VTK_FILE 1
 0x55b8287a36d0 VTK_FILE 1
#err at 83iter: 1.24698e-07
 0x55b8287daf70 VTK_FILE 1
 0x55b8287a2900 VTK_FILE 1
#err at 84iter: 4.76187e-13
 0x55b828de20b0 VTK_FILE 1
 0x55b8287db420 VTK_FILE 1
# nonlinear iter: 85
# residual: 4.76187e-13
times: compile 0.011381s, execution 18.891s,  mpirank:0
 CodeAlloc : nb ptr  6083,  size :596920 mpirank: 0
Ok: Normal End
