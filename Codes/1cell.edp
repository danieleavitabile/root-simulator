// 1 cell solver
// FULLY IMPLICIT : NEWTON + IMPL EULER

load "ffrandom";
load "iovtk";
int[int] ffordervel = [1]; // to save images in .vtk format
int seed = 10;
int ld = 0; // 1: load prev. sol. as initial state
            // 0: use custom initial state
string path = "results/";  // path of the previously computed U, V

/// Parameters:
string prm = "Set B"; // "Set A", "Set B", "Set C"
include "PRM.edp";
include "Jac.edp";
include "G.edp";

Xh U, V, // U_n+1, V_n+1 (new sol at each time step and it.)
   Uold, Vold, // U_k, V_k (prev. iteration sol. of Newton)
   incrU, incrV,
   U0, V0; // U_n, V_n (prev. time-step sol)
Xh pert = eps * cos(2*pi *x)*cos(2*pi*y); //custom perturbation of initial state
real[int] tmp1(2*dimXh), tmp2(2*dimXh),  tmp3(2*dimXh);

varf a(du,phi) = int2d(Th) (1/dt * du * phi);
matrix A1 = a(Xh,Xh);
matrix A = [[A1, 0],
            [0, A1]];
//step of the Newton method: from Uold,Vold (U_k,V_k) -> find U,V (U_k+1, V_k+1))
func int step()
{
  real[int] UU = [Uold[], Vold[]];
  matrix Jac = Jac3(UU);

  real[int] Rhs = G(UU);
  tmp2 = [U0[], V0[]];
  tmp2 = - tmp2;
  tmp2 = tmp2 + UU;
  tmp3 = A * tmp2;
  Rhs = Rhs - tmp3;

  A = A - Jac;
  //set solver for matrices
  set(A, solver = UMFPACK);
  tmp1 = A^-1 * Rhs; //tmp1 = [du, dv]
  for(int ii = 0; ii < Xh.ndof; ii++)
  {
    U[][ii] += tmp1[ii];
    V[][ii] += tmp1[ii + Xh.ndof];
  }

  return 0;
}

//return residual estimate: (normalized) with L2 norm
func real residual()
{
  // compute the increment between (U,V) and (U0,V0)
  incrU[] = U[];
  incrU[] -= Uold[];

  incrV[] = V[];
  incrV[] -= Vold[];

  real errU = int2d(Th) ((incrU)^2);
  real errV = int2d(Th) ((incrV)^2);
  real normU = int2d(Th) ((Uold)^2);
  real normV = int2d(Th) ((Vold)^2);

  return sqrt(errU/(normU+1e-12)) + sqrt(errV/(normV+1e-12));
}

///Initialization
if (ld) {
  ifstream fU(path + "lastU.txt");
  ifstream fV(path + "lastV.txt");

  fU >> U[];
  fV >> V[];

  plot(U, fill = 1, value = 1, cmm = "Loaded Active ROPS", wait = 1);
  plot(V, fill = 1, value = 1, cmm = "Loaded Inactive ROPS", wait = 1);
}
else
{
  U = u0;
  V = v0;
  U[] += pert[];
  V[] += pert[];
  // srandom(seed);
  // // ranreal 1 generates a random number in [0,1]
  //   for(int ii = 0; ii < Xh.ndof; ii++)
  //   {
  //     U[][ii] += randreal1();
  //     V[][ii] += randreal1();
  //   }
}
plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs perturbed", ps = "results/U" + iter + ".ps");
plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs perturbed", ps = "results/V" + iter + ".ps");
// to plot solutions in 3D
// plot(U, dim = 3, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs perturbed");
// plot(V, dim = 3, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs perturbed");
savevtk("results/U" + iter + ".vtk", Th, U, dataname = "Active_ROPs", order = ffordervel);
savevtk("results/V" + iter + ".vtk", Th, V, dataname = "Inactive_ROPs", order = ffordervel);
ofstream foutU("results/U" + iter + ".txt");
ofstream foutV("results/V" + iter + ".txt");
foutU << U[];
foutV << V[];
U0 = U;
V0 = V;
Uold = U;
Vold = V;

/// Main
while(t < Tmax)
{
  t += dt;

  /// Newton loop
  err = tol + 1; // at least one iteration has to be performed
  for(iter = 0; iter < MAXiter && err > tol; ++iter)
  {
    //perform an iteration of the linerized solver
    int errc = step(); // -> find U,V
    if (errc != 0)
    {
      cout << "ERROR" << endl;
      break;
    }

    //update err for the stopping criterion
    err = residual(); //-> compute the residual between U,V and Uold,Vold
    cout << "#err: " << err << endl;

    /// update old solution
    Uold = U;
    Vold = V;
  }
  //exit or with tol reached or with MAXiter reached
  //Uold,Vold are equal to U,V new solution
  cout << "#time " << t << endl;
  //update previous time-step sol.
  U0 = U;
  V0 = V;

  if((it % OUTPUTit == 0.0))
  {
    plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs at time "+ t, ps = "results/U" + t + ".ps");
    plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs at time "+ t, ps = "results/V" + t + ".ps");
    // save imgs in .vtk format
    savevtk("results/U" + t + ".vtk", Th, U, dataname = "Active_ROPs", order = ffordervel);
  	savevtk("results/V" + t + ".vtk", Th, V, dataname = "Inactive_ROPs", order = ffordervel);
    // Output file for last results -> to be loaded in case of interruption
    ofstream foutU("results/U" + t + ".txt");
    ofstream foutV("results/V" + t + ".txt");
    foutU << U[];
    foutV << V[];
    cout << "#time " << t << endl;
  }
}
/// Postprocessing
plot(U, value =1, wait=1, cmm="Concentration of ACTIVE ROPs");
plot(V, value =1, wait=1, cmm="Concentration of INACTIVE ROPs");
