//2 cell solver

load "iovtk";
int[int] ffordervel = [1]; // to save images in .vtk format
int seed = 10;
int ld = 0; // 1: load prev. sol. as initial state
            // 0: use custom initial state
string path = "results/2022-01-10_19-04-00/";  // path of the previously computed U, V

/// Parameters:
string prm = "Set C"; // "Set A", "Set B", "Set C"
include "PRM.edp";
include "channelPRM.edp";

/// Mesh
//1 unique
int out = 1;
border o1(t=Ly*2, 0){x=0; y=t; label=out;}
border o2(t=0, Lx){x=t; y=0; label=out;}
border o3(t=0, 2*Ly){x=Lx; y=t; label=out;}
border o4(t=0, Lx){x=Lx-t; y=2*Ly; label=out;}
// border i(t=0, Lx){x=Lx - t; y=Ly; label=inside;}
// // border i2(t=0, Lx){x=t; y=Ly; label=inside2;}
mesh Th = buildmesh(o1(2*Ny) + o2(Nx) + o3(2*Ny) + o4(Nx));

// mehs 2 cells
int N = 2;
int[int] reg(N);
mesh[int] Thh(N);
int i; // index to distinguish cells: i = 0 -> Th1, i = 1 -> Th2
int inside = 1;
int outside = 2;

border o5(t=Ly*2, 0){x=0; y=t; label=outside;}
border o6(t=0, Lx){x=t; y=0; label=outside;}
border o7(t=0, 2*Ly){x=Lx; y=t; label=outside;}
border o8(t=0, Lx){x=Lx-t; y=2*Ly; label=outside;}
border i1(t=0, Lx){x=Lx - t; y=Ly; label=inside;}
mesh TH = buildmesh(o5(2*Ny) + o6(Nx) + o7(2*Ny) + o8(Nx) + i1(Nx));

reg(0) = TH(Lx/2, Ly - 2).region;
reg(1) = TH(Lx/2, Ly + 2).region;

for(int i = 0; i < N; i++) Thh[i] = trunc(TH, region==reg(i));

fespace Vh1(Thh[0], P1);
Vh1 U1;
Vh1 V1;
fespace Vh2(Thh[1], P1);
Vh2 U2;
Vh2 V2;

/// Finite element spaces
fespace Xh(Th, P1);
int dimXh =Xh.ndof;

Xh pert; //custom perturbation of initial state
pert = eps * cos(2*pi*x)* cos(2*pi*y); // "Set A", "Set B"
// pert = eps * cos(2*pi*x/Lx)* cos(2*pi*y/Ly); // "Set C"

Xh U, V,   // U_n+1, V_n+1 (new sol at each time-step)
   incrU, incrV,
   U0, V0; // U_n, V_n (previous time-step sol)

include "step_semi_implicit.edp";
include "error.edp";

/// Initialization:
if (ld) {
  ifstream fU(path+"U" + tload + ".txt");
  ifstream fV(path+"V" + tload + ".txt");

  fU >> U1[];
  fV >> V1[];
  fU >> U2[];
  fV >> V2[];

}
else
{
  U = u0;
  V = v0;
  U[] += pert[];
  V[] += pert[];
}

/// Interpolation of U1 and U2 on U
// interpolation matrix
// matrix I1tot = interpolate(Xh, Vh1, inside = 1);
// matrix I2tot = interpolate(Xh, Vh2, inside = 1);
// Xh UU1, VV1, UU2, VV2;
// UU1[] = I1tot * U1[];
// VV1[] = I1tot * V1[];
// UU2[] = I2tot * U2[];
// VV2[] = I2tot * V2[];

// plot(U1, value =1, fill =1, wait=1);
// plot(UU1, value =1, fill =1, wait=1);
// plot(UU2, value =1, fill =1, wait=1);

// U[] = UU1[];
// U[] += UU2[];
// V[] = VV1[];
// V[] += VV2[];
// plot(U1, U2,value =1, fill =1, wait=1, cmm = "U divise");
// //
// plot(U, value =1, fill =1, wait=1, cmm = "U insieme");
// plot(V1, V2,value =1, fill =1, wait=1, cmm = "V divise");
// plot(V, value =1, fill =1, wait=1, cmm = "V insieme");

plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs at time "+ t + "perturbed", ps = "results/U" + t + ".ps");
plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs at time "+ t + "perturbed", ps = "results/V" + t + ".ps");
savevtk("results/U" + t + ".vtk", Th, U, dataname = "Active_ROPs", order = ffordervel);
savevtk("results/V" + t + ".vtk", Th, V, dataname = "Inactive_ROPs", order = ffordervel);
ofstream foutU("results/U" + t + ".txt");
ofstream foutV("results/V" + t + ".txt");
foutU << U[];
foutV << V[];
U0 = U;
V0 = V;

while(t < Tmax)
{
  t += dt;
  it ++;

  // perform an iteration of the linerized solver
  int errc = step(); // -> find U,V
  if (errc != 0)
  {
    cout << "ERROR" << endl;
    break;
  }
  plot(U, fill = 1, value = 1, cmm = "Active ROPS at time "+ t, wait = 0);
  plot(V, fill = 1, value = 1, cmm = "Inactive ROPS at time "+ t, wait = 0);

  // update old solution
  U0 = U;
  V0 = V;

  if((it % OUTPUTit == 0.0))
  {
    plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs at time "+ t, ps = "results/U" + t + ".ps");
    plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs at time "+ t, ps = "results/V" + t + ".ps");
  	savevtk("results/U" + t + ".vtk", Th, U, dataname = "Active_ROPs", order = ffordervel);
  	savevtk("results/V" + t + ".vtk", Th, V, dataname = "Inactive_ROPs", order = ffordervel);
    // Output file for last results -> to be loaded in case of interruption
    ofstream foutU("results/U" + t + ".txt");
    ofstream foutV("results/V" + t + ".txt");
    foutU << U[];
    foutV << V[];
    cout << "#time " << t << endl;
  }

}

/// Postprocessing
plot(U, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs");
plot(V, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs");
