//2 cell solver: Robin-Robin ALGO
// correspond to solve 2cells with no communication

load "iovtk";
int[int] ffordervel = [1]; // to save images in .vtk format
int seed = 10;
int ld = 1; // 1: load prev. sol. as initial state
            // 0: use custom initial state
string path = "results/2021-11-28_10-19-46/";  // path of the previously computed U, V

/// Parameters:
string prm = "V2 matlab"; // "Set1", "V1 matlab", "V2 matlab"
include "PRM.edp";
include "channelPRM.edp"; // need alpha_RR = 1 and beta_RR = 1

/// Mesh
int[int] reg(2);
mesh[int] Th(2);
int i; // index to distinguish cells: i = 0 -> Th1, i = 1 -> Th2
int inside = 1;
int outside = 2;
border o1(t=Ly*2, 0){x=0; y=t; label=outside;}
border o2(t=0, Lx){x=t; y=0; label=outside;}
border o3(t=0, 2*Ly){x=Lx; y=t; label=outside;}
border o4(t=0, Lx){x=Lx-t; y=2*Ly; label=outside;}
border i1(t=0, Lx){x=Lx - t; y=Ly; label=inside;}
mesh TH = buildmesh(o1(2*Ny) + o2(Nx) + o3(2*Ny) + o4(Nx) + i1(Nx));

reg(0) = TH(Lx/2, Ly - 2).region;
reg(1) = TH(Lx/2, Ly + 2).region;

for(int i = 0; i < 2; i++) Th[i] = trunc(TH, region==reg(i));

// plot(TH, wait = true);
// plot(Th[0], wait = true);
// plot(Th[1], wait = true);

/// Finite element spaces:
// [U1,V1] solution on domain Th1, [U2,V2] solution on domain Th2
fespace Vh1(Th[0], P1);
Vh1 U1 = u0;
Vh1 V1 = v0;
Vh1 U01 = U1, V01 = V1; // previous time-step sol.
Vh1 U1prec, V1prec, incrU1, incrV1;

fespace Vh2(Th[1], P1);
Vh2 U2 = u0;
Vh2 V2 = v0;
Vh2 U02 = U2, V02 = V2; // previous time-step sol.
Vh2 U2prec, V2prec, incrU2, incrV2;

// U/Viprec previous IT. sol
U1prec = U01;
V1prec = V01;
U2prec = U02;
V2prec = V01;
real resU1, resV1, resU2, resV2;

/// Varf
include "varf_2cellRR.edp";
matrix[int] A(2);
real[int] F1(2*Vh1.ndof), F2(2*Vh2.ndof);
real[int] tmp1(2*Vh1.ndof), tmp2(2*Vh2.ndof);
include "assemble_RR.edp";

// interpolation matrix
matrix I12 = interpolate(Vh2, Vh1, inside = 1);
matrix I21 = interpolate(Vh1, Vh2, inside = 1);

//save residual estimate: (normalized) with L2 norm
func int residual(){
  incrU1[] = U1[];
  incrU1[] -= U1prec[];

  incrV1[] = V1[];
  incrV1[] -= V1prec[];

  incrU2[] = U2[];
  incrU2[] -= U2prec[];

  incrV2[] = V2[];
  incrV2[] -= V2prec[];

  real errU1 = int2d(Th[0]) ((incrU1)^2);
  real errV1 = int2d(Th[0]) ((incrV1)^2);
  real normU1 = int2d(Th[0]) ((U1prec)^2);
  real normV1 = int2d(Th[0]) ((V1prec)^2);

  resU1 = sqrt(errU1/(normU1+1e-12));
  resV1 = sqrt(errV1/(normV1+1e-12));

  cout << "residual U1 " << resU1 << endl;
  cout << "residual V1 " << resV1 << endl;

  real errU2 = int2d(Th[1]) ((incrU2)^2);
  real errV2 = int2d(Th[1]) ((incrV2)^2);
  real normU2 = int2d(Th[1]) ((U2prec)^2);
  real normV2 = int2d(Th[1]) ((V2prec)^2);

  resU2 = sqrt(errU2/(normU2+1e-12));
  resV2 = sqrt(errV2/(normV2+1e-12));

  cout << "residual U2 " << resU2 << endl;
  cout << "residual V2 " << resV2 << endl;

  return 0;
}

while(t < Tmax){
  t += dt;
  it ++;
  i = 0;
  assemble(i);
  i = 1;
  assemble(i);

  checktol = false;
  for (int iter = 0; iter < Niter; iter++){
  // Solve on Th1
  {
    i = 0;

    real[int] Fu = fu(0,Vh1);
    real[int] Fv = fv(0,Vh1);

    //compute weak normal derivative
    real[int] Du2dn = du2dn(0, Vh2);
    real[int] Tdu2dn(Vh1.ndof);
    Tdu2dn = I12' * Du2dn;

    real[int] Dv2dn = dv2dn(0, Vh2);
    real[int] Tdv2dn(Vh1.ndof);
    Tdv2dn = I12' * Dv2dn;

    for(int ii = 0; ii < Vh1.ndof; ii++)
    {
      F1[ii] = Fu[ii] + Tdu2dn[ii];
      F1[ii + Vh1.ndof] = Fv[ii] + Tdv2dn[ii];
    }

    tmp1 = A[i]^-1 * F1;
    for(int ii = 0; ii < Vh1.ndof; ii++)
    {
      U1[][ii] = tmp1[ii];
      V1[][ii] = tmp1[ii + Vh1.ndof];
    }
  }
  // Solve on Th2
  {
    i = 1;

    real[int] Fu = fu(0,Vh2);
    real[int] Fv = fv(0,Vh2);
    
    //compute weak normal derivative
    real[int] Du1dn = du1dn(0, Vh1);
    real[int] Tdu1dn(Vh2.ndof);
    Tdu1dn = I21' * Du1dn;

    real[int] Dv1dn = dv1dn(0, Vh1);
    real[int] Tdv1dn(Vh2.ndof);
    Tdv1dn = I21' * Dv1dn;

    for(int ii = 0; ii < Vh2.ndof; ii++)
    {
      F2[ii] = Fu[ii] + Tdu1dn[ii];
      F2[ii + Vh2.ndof] = Fv[ii] + Tdv1dn[ii];
    }

    tmp2 = A[i]^-1 * F2;
    for(int ii = 0; ii < Vh2.ndof; ii++)
    {
      U2[][ii] = tmp2[ii];
      V2[][ii] = tmp2[ii + Vh2.ndof];
    }
  }
  residual();
  checktol = (resU1 < 1e-2 && resV1 < 1e-2 && resU2 < 1e-2 && resV2 < 1e-2);
  if(checktol){
    iter = Niter+1;
  }

  //update previous IT. sol.
  U1prec = U1;
  V1prec = V1;
  U2prec = U2;
  V2prec = V2;
  // plot(U1,U2, fill = 1, value = 1, cmm = "Active ROPS at time "+ t, wait = 1);
  // plot(V1,V2,fill = 1, value = 1, cmm = "Active ROPS at time "+ t, wait = 1);

  }

  // update old solution
  U01 = U1;
  V01 = V1;
  U02 = U2;
  V02 = V2;

  ///Results and save imgs
  if((it % OUTPUTit == 0.0))
  {
    plot(U1, U2, value =1, fill =1/*, wait=1*/, cmm="Concentration of ACTIVE ROPs at time "+ t, ps = "results/U" + t + ".ps");
    plot(V1, V2, value =1, fill =1/*, wait=1*/, cmm="Concentration of INACTIVE ROPs at time "+ t, ps = "results/V" + t + ".ps");

    savevtk("results/U1_" + t + ".vtk", Th[0], U1, dataname = "U1", order = ffordervel);
    savevtk("results/V1_" + t + ".vtk", Th[0], V1, dataname = "V1", order = ffordervel);
    savevtk("results/U2_" + t + ".vtk", Th[1], U2, dataname = "U2", order = ffordervel);
    savevtk("results/V2_" + t + ".vtk", Th[1], V2, dataname = "V2", order = ffordervel);

    // Output file for last results -> to be loaded in case of interruption
    ofstream foutU("results/U" + t + ".txt");
    ofstream foutV("results/V" + t + ".txt");
    foutU << U1[];
    foutU << U2[];
    foutV << V1[];
    foutV << V2[];
    cout << "#time " << t << endl;
  }

}
