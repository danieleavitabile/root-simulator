//matrices for RR algos: classic and modified
matrix Au;
matrix Av;
matrix Bu;
matrix Bv;

matrix tmpu, tmpv;
matrix Cu, Cv; // nedd to be updated at every time step

// comment not used alternatives in the if-else instructions
// (ex: comment from "else if (i == 3) {...}" if you have 2 cells only)

/// function | (input) index i of the cell
//  assemble | (output) update matrices, set solver
func int assemble(int i){
  if (i == 0){
    Au = au(Vh1,Vh1);
    Av = av(Vh1,Vh1);
    Bu = bu(Vh1,Vh1);
    Bv = bv(Vh1,Vh1);

    // update time-dep matrices
    Cu = cu(Vh1,Vh1);
    Cv = cv(Vh1,Vh1);

    tmpu = Bu+Cu;
    tmpv = Av+Cv;
    A[i]= [[Au, tmpu],
           [Bv, tmpv]];
    //set solver for matrices
    set(A[i], solver = UMFPACK);
  }
  else if (i == 1){
    Au = au(Vh2,Vh2);
    Av = av(Vh2,Vh2);
    Bu = bu(Vh2,Vh2);
    Bv = bv(Vh2,Vh2);

    // update time-dep matrices
    Cu = cu(Vh2,Vh2);
    Cv = cv(Vh2,Vh2);

    tmpu = Bu+Cu;
    tmpv = Av+Cv;
    A[i]= [[Au, tmpu],
           [Bv, tmpv]];
    //set solver for matrices
    set(A[i], solver = UMFPACK);
  }
  else if (i == 2){
    Au = au(Vh3,Vh3);
    Av = av(Vh3,Vh3);
    Bu = bu(Vh3,Vh3);
    Bv = bv(Vh3,Vh3);

    // update time-dep matrices
    Cu = cu(Vh3,Vh3);
    Cv = cv(Vh3,Vh3);

    tmpu = Bu+Cu;
    tmpv = Av+Cv;
    A[i]= [[Au, tmpu],
           [Bv, tmpv]];
    //set solver for matrices
    set(A[i], solver = UMFPACK);
  }
  else if (i == 3){
    Au = au(Vh4,Vh4);
    Av = av(Vh4,Vh4);
    Bu = bu(Vh4,Vh4);
    Bv = bv(Vh4,Vh4);

    // update time-dep matrices
    Cu = cu(Vh4,Vh4);
    Cv = cv(Vh4,Vh4);

    tmpu = Bu+Cu;
    tmpv = Av+Cv;
    A[i]= [[Au, tmpu],
           [Bv, tmpv]];
    //set solver for matrices
    set(A[i], solver = UMFPACK);
  }
  return 0;
}
